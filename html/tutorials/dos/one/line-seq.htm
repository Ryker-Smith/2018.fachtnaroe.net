<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Eric Phelps">
   <META NAME="GENERATOR" CONTENT="Mozilla/4.04 [en] (Win95; I) [Netscape]">
   <META NAME="Description" CONTENT="By repetitively processing and stripping the first line in a list, the entire list can be processed.">
   <TITLE>Batch Sequential Processing of a List</TITLE>
</HEAD>
<BODY>

<CENTER>
<H2>
Batch Sequential Processing of a List</H2></CENTER>

<CENTER>
<HR width="100%"><I>By repetitively processing and stripping the first
line in a list, the entire list can be processed.</I>&nbsp;
<HR width="100%"></CENTER>


<P>This is the "pure" way to use DOS to process an entire list. Very disk-intensive.
<A HREF="frag-man.htm">Create a line fragment</A> and put it at
the head of your data file. The line fragment will be the name of your
processing batch file followed by a single space. Now your data file is
a batch file! After running it, you will have processed your first data
line. Now run the data / batch file through FIND to strip off the first
line, turning it back into a (smaller) data file again. Then add your line
fragment again (turning it back into a batch file) and re-run it, this
time processing the second line. Keep doing this until all lines are processed.
As an example, suppose we start with this:
<BR>&nbsp;
<CENTER><TABLE BORDER CELLPADDING=5 >
<TR VALIGN=TOP>
<TD>
<CENTER><I>FRAGMENT.TXT</I></CENTER>
</TD>

<TD>
<CENTER><I>DATA.TXT</I></CENTER>
</TD>

<TD>
<CENTER><I>MAIN.BAT</I></CENTER>
</TD>

<TD>
<CENTER><I>PROCESS.BAT</I></CENTER>
</TD>
</TR>

<TR VALIGN=TOP>
<TD><B><TT>PROCESS.BAT&nbsp;</TT></B></TD>

<TD><B><TT>data1</TT></B>&nbsp;
<BR><B><TT>data2</TT></B>&nbsp;
<BR><B><TT>data3</TT></B></TD>

<TD VALIGN=TOP NOWRAP><B><TT>@echo off</TT></B>&nbsp;
<BR><B><TT>:START</TT></B>&nbsp;
<BR><B><TT>copy FRAGMENT.TXT + DATA.TXT DATA.BAT > NUL</TT></B>&nbsp;
<BR><B><TT>call DATA.BAT</TT></B>&nbsp;
<BR><B><TT>type DATA.BAT | find /v "PROCESS.BAT" > DATA.TXT</TT></B>&nbsp;
<BR><B><TT>copy DATA.TXT NUL | find "0" > NUL</TT></B>&nbsp;
<BR><B><TT>if errorlevel 1 goto START</TT></B>&nbsp;
<BR><B><TT>:DONE&nbsp;</TT></B></TD>

<TD VALIGN=TOP NOWRAP><B><TT>echo Processing %1</TT></B></TD>
</TR>
</TABLE></CENTER>
Here are the tricks in MAIN.BAT. First off, everything gets redirected
into NUL to keep the screen clean. The initial COPY command will result
in a DATA.BAT file that looks like this:
<BR><B><TT>PROCESS.BAT data1</TT></B>
<BR><B><TT>data2</TT></B>
<BR><B><TT>data3</TT></B>
<BR>When DATA.BAT is CALLed, it will in turn run PROCESS.BAT, passing "data1"
as the argument. PROCESS.BAT, in turn, will display "<B><TT>Processing
data1</TT></B>" on the screen. Because DATA.BAT "runs" PROCESS.BAT (instead
of CALLing it), control will *not* return to the second line of DATA.BAT
after PROCESS.BAT finishes. Instead, control passes back to MAIN.BAT. Next,
DATA.BAT is TYPEd through FIND to remove the first line. We now have a
DATA.TXT without the first line:
<BR><B><TT>data2</TT></B>
<BR><B><TT>data3</TT></B>
<BR>By attempting to COPY DATA.TXT (into NUL, so there is no real copy
happening), we can determine if all the lines have been processed. By a
happy quirk, DOS will refuse to copy a zero-byte file. If that is the case,
COPY will report "<B><TT>0 file(s) copied</TT></B>". By using FIND to search
the output of COPY for that zero, we can determine if we are done with
the file. If we don't find the zero, there are more lines left, so we go
back to START.
<P><CENTER>Bad links? Questions? <A HREF="mail.htm">Send me mail</A>.</CENTER>
</BODY>
</HTML>
