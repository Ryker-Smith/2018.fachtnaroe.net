<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="GENERATOR" CONTENT="Mozilla/4.06 [en] (Win95; I) [Netscape]">
</HEAD>
<BODY>

<CENTER>
<H2>
Batch File Programming: Stupid Useless Tricks</H2></CENTER>

<CENTER>
<HR WIDTH="100%"><I>Coming under the heading of the "Edison Effect": Thomas
Edison could have been the father of electronics when he discovered the
electron cloud surrounding heated filaments, but he dismissed it as merely
a curiosity. We all bump into curious items, but never pursue thier practical
application...</I>
<HR WIDTH="100%"></CENTER>

<BR>&nbsp;
<H3>
<A NAME="preface"></A>Prefacing commands with +</H3>
Also works with commas and semicolons. Generally causes the command to
treat it's last letter as it's first argument. For example, <B><TT>+MD</TT></B>
will create a directory named <B><TT>D</TT></B>. One exception is echo.
It treats the entire word as it's first argument.
<PRE><B><TT>N:\temp>dir
Volume in drive N is HDA1_BOOT&nbsp;
Volume Serial Number is 32FF-2953&nbsp;
Directory of N:\temp

.&nbsp; &lt;DIR> 04-17-97 3:24p .&nbsp;
.. &lt;DIR> 04-17-97 3:24p ..&nbsp;
0 file(s) 0 bytes&nbsp;
2 dir(s) 2,215,936 bytes free</TT></B></PRE>

<PRE><B><TT>N:\temp>+md</TT></B></PRE>

<PRE><B><TT>N:\temp>dir</TT></B></PRE>

<PRE><B><TT>Volume in drive N is HDA1_BOOT&nbsp;
Volume Serial Number is 32FF-2953&nbsp;
Directory of N:\temp

.&nbsp; &lt;DIR> 04-17-97 3:24p .&nbsp;
.. &lt;DIR> 04-17-97 3:24p ..&nbsp;
D&nbsp; &lt;DIR> 04-17-97 3:24p d&nbsp;
0 file(s) 0 bytes&nbsp;
3 dir(s) 2,215,424 bytes free</TT></B></PRE>

<PRE><B><TT>N:\temp>+echo hello&nbsp;
echo hello</TT></B></PRE>

<HR WIDTH="100%">
<H3>
<A NAME="revision"></A>Display Windows Revision</H3>

<PRE>Use the undocumented /R option on the VER command.
<B><TT>C:\>ver
Windows 95. [Version 4.00.950]
C:\>ver /r
Windows 95. [Version 4.00.950]&nbsp;
Revision A&nbsp;
DOS is in HMA</TT></B></PRE>

<HR WIDTH="100%">
<H3>
<A NAME="errorlevel"></A>Display Error Levels</H3>

<PRE>Use the undocumented /Z option on COMMAND
<B><TT>N:\temp>command /z</TT></B></PRE>

<PRE><B><TT>Microsoft(R) Windows 95&nbsp;
(C)Copyright Microsoft Corp 1981-1995.&nbsp;
Return code (ERRORLEVEL): 0&nbsp;
WARNING: Reloaded COMMAND.COM transient</TT></B></PRE>

<PRE><B><TT>N:\temp>echo test|find "test">nul&nbsp;
Return code (ERRORLEVEL): 0</TT></B></PRE>

<PRE><B><TT>N:\temp>echo qwerty|find "test">nul&nbsp;
Return code (ERRORLEVEL): 1</TT></B></PRE>

<PRE><B><TT>N:\temp> exit

N:\temp></TT></B></PRE>

<HR WIDTH="100%">
<H3>
<A NAME="floppy"></A>Change Floppy Serial Numbers</H3>
Use DEBUG to change data on the disk
<P>This example shows how to "turn off" the serial number display for the
disk in the A: drive. The digit shown in blue on the "E" command is the
one that toggles display of the serial number.
<BR><B><TT>C:\>DEBUG</TT></B>
<BR><B><TT>-L 0 0 0 1</TT></B>
<BR><B><TT>-E 26 <FONT COLOR="#0000FF">00</FONT></TT></B>
<BR><B><TT>-W 0 0 0 1</TT></B>
<BR><B><TT>-Q</TT></B>
<P><B><TT>C:\>DIR A:</TT></B>
<P><B><TT>Volume in drive A has no label</TT></B>
<BR><B><TT>Directory of A:\</TT></B>
<P>This example shows how to set the serial number for the disk in the
A: drive to any value. Notice the numbers you enter (in red) are mirrored
from the serial number you'll get.
<BR><B><TT>C:\>debug</TT></B>
<BR><B><TT>-L 0 0 0 1</TT></B>
<BR><B><TT>-E 26 <FONT COLOR="#0000FF">29</FONT> <FONT COLOR="#FF0080">78
56 34 12</FONT></TT></B>
<BR><B><TT>-W 0 0 0 1</TT></B>
<BR><B><TT>-Q</TT></B>
<P><B><TT>C:\>DIR A:</TT></B>
<P><B><TT>Volume in drive A has no label</TT></B>
<BR><B><TT>Volume Serial Number is <FONT COLOR="#FF0080">1234-5678</FONT></TT></B>
<BR><B><TT>Directory of A:\</TT></B>
<P>
<HR WIDTH="100%">
<H3>
<A NAME="more"></A>Using MORE to Concatenate</H3>
MORE is the only command I know that accepts two input methods <B><I>at
once. </I></B>While MORE is usually used with piping or redirection, it
can also be supplied with a filename. If you supply both, MORE will "page"
both , so you must be careful the <B><I>combined length</I></B> will not
exceed a page (or you'll be forced to press a key). Notice with the sample
files I generated below how MORE places a CR/LF pair at the beginning of
each file, but leaves the ends alone.
<BR>&nbsp;
<CENTER><TABLE BORDER >
<TR>
<TD ALIGN=LEFT VALIGN=TOP COLSPAN="2" NOWRAP>
<CENTER><B><I>Generation of sample files used in this example</I></B></CENTER>
</TD>
</TR>

<TR>
<TD ALIGN=LEFT VALIGN=TOP NOWRAP><B><TT>E:\>copy con now.txt&nbsp;</TT></B>
<BR><B><TT>Now is the time&nbsp;</TT></B>
<BR><B><TT>for all good men^Z</TT></B>
<BR><B><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1 file(s) copied</TT></B></TD>

<TD ALIGN=LEFT VALIGN=TOP NOWRAP><B><TT>E:\>copy con to.txt&nbsp;</TT></B>
<BR><B><TT>to come to the aid&nbsp;</TT></B>
<BR><B><TT>of their country^Z&nbsp;</TT></B>
<BR><B><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1 file(s) copied&nbsp;</TT></B></TD>
</TR>
</TABLE></CENTER>

<CENTER>
<P><IMG SRC="more.gif" HEIGHT=306 WIDTH=652></CENTER>

<BR>&nbsp;
<P><BR>
<P>Although my example used
<BR><B><TT>type now.txt|more to.txt</TT></B>
<BR>the same results are achieved with
<BR><B><TT>more&lt;now.txt to.txt</TT></B>
<HR WIDTH="100%">
<H3>
<A NAME="attrib"></A>Using ATTRIB to Search for a File</H3>
ATTRIB with the /S option will search all subdirectories for the designated
files. This is much faster than the method of using FIND on the output
of DIR /S /B. In fact, it runs about twice as fast as the Windows 95 "Find
Files or Folders" function. In addition, it always returns the short "8.3"
filename. Frustratingly, it also returns the short path appended to the
long filename. For example:
<PRE><B><TT>H:\>attrib /s longf*.*
&nbsp; A&nbsp;&nbsp; HR&nbsp;&nbsp;&nbsp;&nbsp; LONGFI~2.TXT&nbsp; H:\VB5\MSDEVE~1\Long File Name.txt</TT></B></PRE>
There is a temptation to use ATTRIB as a long-to-short filename converter.
Unfortunately, the attributes do get displayed first. So you can't be sure
what position your filename will be in because you don't know how many
attributes there are. Since long file names can contain spaces, you can't
just start at the end and work backwards either. The good news is that
ATTRIB sets errorlevels based on whether or not it found files. So you
can at least use it like a recursive IF EXIST:
<PRE><B><TT>attrib /s \somefile.txt
if not errorlevel 1 echo I found "somefile.txt" somewhere on the disk</TT></B></PRE>

<HR WIDTH="100%">
<H3>
<A NAME="abort"></A>Surviving Abort, Retry, Fail</H3>
If you invoke the undocumented /F option on COMMAND, it will automatically
answer "F" to any<B><TT> Abort, Retry, Fail?</TT></B> questions. This eliminates
the fear of your program hanging if you reference a floppy that isn't inserted.
Although the questions are answered automatically, they still appear on
screen...
<PRE><B><TT>C:\WINDOWS>COMMAND /F</TT></B></PRE>

<PRE><B><TT>Microsoft(R) Windows 95
&nbsp;&nbsp; (C)Copyright Microsoft Corp 1981-1995.</TT></B></PRE>

<PRE><B><TT>C:\WINDOWS>DIR A:</TT></B></PRE>

<PRE><B><TT>Not ready reading drive A&nbsp;
Abort, Retry, Fail?</TT></B></PRE>

<PRE><B><TT>Not ready reading drive A&nbsp;
Abort, Retry, Fail?Volume in drive A has no label</TT></B></PRE>

<PRE><B><TT>Not ready reading drive A&nbsp;
Abort, Retry, Fail?Fail on INT 24</TT></B></PRE>

<PRE><B><TT>C:\WINDOWS>if exist a:\nul echo hello</TT></B></PRE>

<PRE><B><TT>Not ready reading drive A&nbsp;
Abort, Retry, Fail?&nbsp;
Not ready reading drive ?&nbsp;
Abort, Retry, Fail?&nbsp;
C:\WINDOWS> exit</TT></B></PRE>

<PRE><B><TT>C:\WINDOWS></TT></B></PRE>

<HR WIDTH="100%">
<H3>
<A NAME="exist"></A>Redirection based on IF EXIST</H3>
If you use IF EXIST (or IF NOT EXIST) without the required command, you
can specify a file for the next command (prompt and all) to be redirected
into. Notice the command gets redirected, not the command's output. The
redirection only occurs when the IF condition is true and if echo is on.
If the condition is false or echo is off, a zero-byte file is generated
instead. The bad news is that this <B>only works on Win95.</B>
<PRE><B><TT>echo on
@if exist nul > test.txt
echo off</TT></B></PRE>
In the above example, since NUL always exists, TEST.TXT will contain the
string <B><TT>C:\>echo off</TT></B>.<B><TT> </TT></B>Although nobody does
it this way, this has obvious applications in capturing prompts without
launching a separate DOS shell:
<PRE><B><TT>@ctty nul&nbsp;
prompt set value$Q&nbsp;
echo on&nbsp;
if exist nul>temp.bat
hello&nbsp;
echo off&nbsp;
prompt $p$g&nbsp;
ctty con</TT></B></PRE>
When the above file is run, it will create a TEMP.BAT with the text<B><TT>
set value=hello </TT></B>in it. The<B><TT> ctty nul </TT></B>hides the<B><TT>
Bad command or file name </TT></B>error that happens because "<B><TT>hello</TT></B>"
is not a valid command.
<P>
<HR WIDTH="100%">
<H3>
<A NAME="truename"></A>TRUENAME Simplifies complex paths</H3>
Some batch programs may arrive at a path by appending<B><TT> \.. </TT></B>to
move around. Afterwards, it may not be clear just where DOS thinks things
are. The undocumented TRUENAME command will resolve and simplify 8.3 names
whether the files or directories they reference exist or not. TRUENAME
even sees through SUBST and JOIN (like anybody uses them nowadays). In
the examples below, all commands were entered from the<B><TT> E:\> </TT></B>prompt.
The responses all refer to the C: drive.
<PRE><B><TT>E:\>TRUENAME C:\PROGRA~1\WINZIP\..\..\WINZIP\PROGRA~1\NUL</TT></B></PRE>

<PRE><B><TT>C:/NUL</TT></B></PRE>

<PRE><B><TT>E:\>TRUENAME C:\PROGRA~1\WINZIP\..\..\WINZIP\PROGRA~1\README.TXT</TT></B></PRE>

<PRE><B><TT>C:\WINZIP\PROGRA~1\README.TXT</TT></B></PRE>

<PRE><B><TT>E:\>TRUENAME C:\PROGRA~1\WINZIP\..\WINZIP\README.TXT</TT></B></PRE>

<PRE><B><TT>C:\PROGRA~1\WINZIP\README.TXT</TT></B></PRE>
The bad news is that TRUENAME absolutely will not work with long file names.
It simply truncates the names until they fit in an 8.3 mask, and will happily
give you the bogus name as a result. The good news is that if you change
into a directory, running TRUENAME without arguments will give you the
real legitimate short name of the directory.
<P>
<HR WIDTH="100%">
<H3>
<A NAME="environment"></A>Instant Environment Space</H3>
If you need to set lots of environment variables, but you're not sure if
there's going to be enough space left for them, you're faced with a tough
problem. You have to use the /E option on SHELL in your CONFIG.SYS or with
COMMAND to boost your environment space beyond the standard 256 bytes.
All well and good on <B>your</B> machine. But if you write for others,
maybe they <B>already</B> have a 1024 byte environment. Normally, when
you use COMMAND to launch another session, you get a copy of the current
environment. But there's an easy way to stop that! Run COMMAND specifying
the path for COMMAND.COM (you forgot about that option, didn't you!). You
don't have to specify a valid path, but you can if you want to.
<PRE><B><TT>E:\>set&nbsp;
TMP=C:\WINDOWS\TEMP&nbsp;
TEMP=C:\WINDOWS\TEMP&nbsp;
PROMPT=$p$g&nbsp;
winbootdir=C:\WINDOWS&nbsp;
COMSPEC=C:\WINDOWS\COMMAND.COM&nbsp;
PATH=C:\WINDOWS;C:\WINDOWS\COMMAND;C:\UTILS;&nbsp;
windir=C:\WINDOWS</TT></B></PRE>

<PRE><B><TT>E:\>command .&nbsp;
Specified COMMAND search directory bad</TT></B></PRE>

<PRE><B><TT>Microsoft(R) Windows 95
&nbsp;&nbsp; (C)Copyright Microsoft Corp 1981-1995.</TT></B></PRE>

<PRE><B><TT>E>set&nbsp;
PATH=</TT></B></PRE>

<PRE><B><TT>E>exit</TT></B></PRE>

<PRE><B><TT>E:\>command c:\windows</TT></B></PRE>

<PRE><B><TT>Microsoft(R) Windows 95&nbsp;
&nbsp;&nbsp; (C)Copyright Microsoft Corp 1981-1995.</TT></B></PRE>

<PRE><B><TT>E>set&nbsp;
PATH=</TT></B></PRE>

<PRE><B><TT>E>exit</TT></B></PRE>

<PRE><B><TT>E:\></TT></B></PRE>
If you have a heavy-duty batch file, you can call it this way:
<BR><B><TT>command \ /c test.bat</TT></B>
<BR>Be careful using this technique, because the entire environment is
gone (until you exit). That means no PATH. No access to any commands not
in the current directory. You might want to make a copy of the PATH before
you jump into the clean session. Notice in the example code below I used
"noenvironment" as the command search path. It makes it a little more self-documenting.
<PRE><B><TT>@echo off
echo Here is the original environment:
set
echo @echo off > test.bat
path >> test.bat
echo echo. >> test.bat
echo echo Here is the clean environment: >> test.bat
echo set >> test.bat
command noenvironment /c test.bat
del test.bat</TT></B></PRE>

<HR WIDTH="100%">
<H3>
<A NAME="echo"></A>ECHOing the words ON and OFF</H3>
Echo is often used to create secondary batch files, Basic files, and user
prompts. Very rarely, you'll need to echo a line that <U>starts</U> with<B><TT>
on </TT></B>or<B><TT> off</TT></B>. If so, you can expand on a trick used
to create blank lines. You probably already know that<B><TT> echo. </TT></B>(echo
followed by a period with no space between) will result in a blank line,
but did you know that you can substitute any of these five characters<B><TT>
/ \ [ ] + </TT></B>instead of the period as well? It turns out that echo
followed by any of those six characters will result in echo treating on
and off as simple words:
<PRE><B>E:\>echo on error goto done
ON

E:\>echo.on error goto done
on error goto done

E:\>echo on

E:\>echo.on
on

E:\>echo off - opposite of on
OFF

E:\>echo.off - opposite of on
off - opposite of on</B></PRE>

<HR WIDTH="100%">
<P><A NAME="dos5"></A><B><FONT SIZE=+1>Running DOS 5 &amp; 6 Under Windows
95</FONT></B>
<P><IMG SRC="dos.gif" HEIGHT=670 WIDTH=436 ALIGN=RIGHT>Now, this is the
stupidest thing you could ever want to do. The only time I ever do it is
when I want a quick test of some obsolete feature for a compatibility check.
Otherwise I reboot my machine (I love System Commander!) into the appropriate
OS. Still, to quote Douglas Adams, it's "Mostly harmless". You can see
by the picture that I am running 5 different versions of DOS simultaneously.
Try not to do too much unless you like seeing<B><TT> Incorrect DOS version
</TT></B>on
every other command. All you need to do is copy and rename your command.com
files ( I picked DOS500, DOS600, etc.). Then use SETVER to put the new
names in the version table, for example
<PRE><B><TT>setver dos500.com 5.00
setver dos600.com 6.00
setver dos620.com 6.20
setver dos622.com 6.22</TT></B></PRE>
After you reboot, you'll be able to use the old versions of DOS simultaneously
just like I do. Just don't try to run them from the command line or you'll
lock up your DOS window. Either double-click them with Explorer, put them
in your Start Menu, or use START from the command line to run them in a
separate window.
<P>
<HR WIDTH="100%">
<P><A NAME="geteverything"></A><B><FONT SIZE=+1>Get Everything Before Something
Else</FONT></B>
<BR>No, there is no better way to describe it. If you have a string like<B><TT>
2:34:56.78p </TT></B>and you want to take action based on everything before
the first colon, you can do it without parsing it character-by-character.
The only restriction is that the "colon" has to be one of these ten special
characters:<B><TT>&nbsp; [&nbsp; :&nbsp; ,&nbsp; .&nbsp; /&nbsp; \&nbsp;
;&nbsp; + =&nbsp; ]&nbsp;<FONT SIZE=+1>&nbsp;</FONT></TT></B>&nbsp; What
you do is GOTO to a label in your program and use the string as the specified
destination. Except it won't actually go there. It only reads up to the
first special character. Suppose I had these two batch files:
<P><B><TT>::TEST1.BAT<BR>
@echo off</TT></B>
<BR><B><TT>call test2.bat 2:34:56.78p</TT></B><B><TT></TT></B>
<P><B><TT>::TEST2.BAT<BR>
@echo off</TT></B>
<BR><B><TT>goto LBL%1</TT></B>
<BR><B><TT>:LBL</TT></B>
<BR><B><TT>echo I didn't go to a label!</TT></B>
<BR><B><TT>goto DONE</TT></B>
<BR><B><TT>:LBL1</TT></B>
<BR><B><TT>echo At label 1</TT></B>
<BR><B><TT>goto DONE</TT></B>
<BR><B><TT>:LBL2</TT></B>
<BR><B><TT>echo At label 2</TT></B>
<BR><B><TT>goto DONE</TT></B>
<BR><B><TT>:DONE</TT></B>
<P>When TEST1 runs, it calls TEST2, passing it<B><TT> 2:34:56.78p </TT></B>as
an argument. TEST2 then has a GOTO command which you might think would
get interpreted as<B><TT> GOTO LBL2:34:56.78p </TT></B>The amazing thing
is that it actually goes to<B><TT> LBL2</TT></B>! Everything from the colon
on to the right got ignored! So this is a way to make a jump in your program
based on a drive letter, hour, month or who knows what else.
<BR>
<HR WIDTH="100%">
<BR>&nbsp;
<P><BR>
<CENTER>
<P>Bad links? Questions? <A HREF="mail.htm">Send
me mail</A>.</CENTER>

<BR>&nbsp;
</BODY>
</HTML>
