<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Eric Phelps">
   <META NAME="GENERATOR" CONTENT="Mozilla/4.04 [en] (Win95; I) [Netscape]">
   <META NAME="Description" CONTENT="If a DOS command spits out anything that might be used in imaginative ways, I cover it here.">
   <TITLE>Redirecting Error Messages &amp; Prompts</TITLE>
</HEAD>
<BODY>

<CENTER>
<H2>
Redirecting Error Messages &amp; Prompts</H2></CENTER>

<CENTER>
<HR WIDTH="100%"><I>Some commands produce prompts or error messages which
(1) Can be redirected, and (2) Follow the prompt or error message with
the original argument. These outputs can be reused as batch files to allow
processing of the original arguments.</I>&nbsp;
<HR WIDTH="100%"></CENTER>


<P>This is probably the most popular way of putting known words at the
beginning of your data line. Maybe not the words you wanted, but at least
you don't have to use DEBUG. The basic idea here is to pass your entire
data line(s) as an argument to one of the normal DOS commands, then have
the DOS command kick out a message which will always contain the same first
word (so we can make a batch file with that name) and will have our original
data line on the same line. Remember, what we want is an error message,
so be sure your data doesn't have what the command wants! If there is even
a remote chance that legitimate data might be present, you should <A HREF="numbring.htm">poison
your data lines by numbering them</A>. Here's a summary:

<P>
<HR WIDTH="100%"><A NAME="date"></A><B><FONT SIZE=+1>DATE</FONT></B> Accepts
unlimited input lines. Allows input piping. Output for each line input.
Terminates on first blank line. First word in all lines must not be a date.
Typical use:
<BR><B><TT>::Remove blank lines</TT></B>
<BR><B><TT>DIR | FIND " " > TEMP.TXT</TT></B>
<BR><B><TT>::Add blank line at end</TT></B>
<BR><B><TT>ECHO.>> TEMP.TXT</TT></B>
<BR><B><TT>::Run data thru DATE, search for desired line</TT></B>
<BR><B><TT>DATE &lt; TEMP.TXT | FIND "Volume in drive" > TEMP.BAT</TT></B>

<P>Typical contents of TEMP.BAT:
<BR><B><TT>Enter new date (mm-dd-yy): Volume in drive C is MS-DOS</TT></B>

<P>If you use DATE, you must create an ENTER.BAT that references your data
starting at %4. FC is often used ahead of DATE to <A HREF="numbring.htm">number
the input data</A> because it will poison the data (insuring no date info),
remove blank lines, add a blank line at the end (to terminate DATE), and
make the results easier to search with FIND for the desired line(s).

<P>Typical use of DATE with FC:
<BR><B><TT>dir > temp.bat</TT></B>
<BR><B><TT>fc /n temp.bat nul | date | find " 2: " > temp.bat</TT></B>
<PRE>Typical contents of TEMP.BAT:
<B><TT>Enter new date (mm-dd-yy):&nbsp;&nbsp; 2:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Volume in drive C is MS-DOS</TT></B></PRE>
<B><FONT COLOR="#993366">The use of DATE described above is the single
most useful trick in batch programming.</FONT></B>
<BR>
<HR WIDTH="100%"><A NAME="time"></A><B><FONT SIZE=+1>TIME </FONT></B>Accepts
unlimited input lines. Allows input piping. Output for each line input.
Terminates on first blank line. First word in all lines must not be a time.
Typical use:
<BR><B><TT>::Remove blank lines</TT></B>
<BR><B><TT>DIR | FIND " " > TEMP.TXT</TT></B>
<BR><B><TT>::Add blank line at end</TT></B>
<BR><B><TT>ECHO.>> TEMP.TXT</TT></B>
<BR><B><TT>::Run data thru TIME, search for desired line</TT></B>
<BR><B><TT>TIME &lt; TEMP.TXT | FIND "Volume in drive" > TEMP.BAT</TT></B>

<P>Typical contents of TEMP.BAT:
<BR><B><TT>Enter new time: Volume in drive C is MS-DOS</TT></B>

<P>If you use TIME, you must create an ENTER.BAT that references you data
starting at %3. FC cannot be used ahead of TIME because the <B><TT>1:</TT></B>,
<B><TT>2:</TT></B>, etc. outputs are interpreted as legitimate times. <A HREF="numbring.htm">FIND
with the /N</A> option may be used if necessary (yuk).

<P>Typical use of TIME with FIND:
<BR><B><TT>dir > temp.bat</TT></B>
<BR><B><TT>type temp.bat | find /n /v "unlikely" > temp.bat</TT></B>
<BR><B><TT>echo.>> temp.bat</TT></B>
<BR><B><TT>type temp.bat | time | find "[2]" > temp.bat</TT></B>

<P>Typical output of TEMP.BAT:
<BR><B><TT>Enter new time: [2] Volume in drive C is MS-DOS</TT></B>
<BR><B><FONT COLOR="#993366">TIME is not used as often as DATE because
TIME is not compatible with FC.</FONT></B>
<BR>
<HR WIDTH="100%"><A NAME="move"></A><B><FONT SIZE=+1>MOVE</FONT></B> Accepts
unlimited command-line parameters. No input piping. No arguments should
be file, directory, or device names. The last argument will not be processed.
If more than two arguments are supplied, the final argument must be a directory
which exists (use a single period to indicate the current directory, which
always exists). Outputs a separate line for each argument. Typical use:

<P><B><TT>MOVE one two three four . > TEMP.BAT</TT></B>
<BR>Contents of TEMP.BAT:
<BR><B><TT>Cannot move one - No such file or directory</TT></B>
<BR><B><TT>Cannot move two - No such file or directory</TT></B>
<BR><B><TT>Cannot move three - No such file or directory</TT></B>
<BR><B><TT>Cannot move four - No such file or directory</TT></B>

<P>If you use MOVE, you must create a CANNOT.BAT that references your data
at %2.
<BR><B><FONT COLOR="#993366">Because of the requirement to use an exising
directory as the last argument, I can see no widespread use for the MOVE
error messages in batch programmimg.</FONT></B>
<BR>
<HR WIDTH="100%"><A NAME="mode"></A><B><FONT SIZE=+1>MODE</FONT></B> Accepts
command-line parameters only. No input piping. Outputs first argument.
First word must not be a system device name. Useful for extracting the
drive or root portion of a file name. Typical use:

<P><B><TT>MODE TEST.TXT > TEMP.BAT</TT></B>
<BR>Contents of TEMP.BAT:
<BR><B><TT>Invalid parameter - TEST</TT></B>

<P><B><TT>MODE C:\TEMP\TEST.TXT > TEMP.BAT</TT></B>
<BR>Contents of TEMP.BAT:
<BR><B><TT>Invalid parameter - C</TT></B>

<P>If you use MODE, you must create an INVALID.BAT that references your
data at %3. NOTE: unlike almost every other command, MODE <B><U>under Windows
95</U></B> does not add a CR/LF at the end of it's output line! In other
words, it generates what I refer to as a "line fragment" which can be concatenated
with another line to create a new line:
<PRE><B><TT>echo test data> test.txt
mode = > temp.bat
copy temp.bat + test.txt</TT></B></PRE>
Results in a TEMP.BAT containing:
<BR><B><TT>Invalid parameter - = test data</TT></B>
<BR>Use an equals sign as the argument because it, like spaces and commas,
is a "delimiter". Your TEMP.BAT won't process the equals sign, so you can
write an INVALID.BAT which can start processing data at %3.
<BR><B><FONT COLOR="#993366">Using the MODE error message is the quickest
way to create a line fragment.</FONT></B>
<BR>
<HR WIDTH="100%"><A NAME="expand"></A><B><FONT SIZE=+1>EXPAND</FONT></B>
Requires two non-blank lines, unlimited blank lines. Allows input piping.
Outputs first non-blank line. First word in line must not be a file name.
Typical use:
<BR><B><TT>::Get desired line</TT></B>
<BR><B><TT>DIR | FIND "Volume in drive" > TEMP.TXT</TT></B>
<BR><B><TT>::Add dummy second line ECHO FOO >> TEMP.TXT</TT></B>
<BR><B><TT>::Run data thru EXPAND, search for desired line</TT></B>
<BR><B><TT>EXPAND &lt; TEMP.TXT | Find "Error -" > TEMP.BAT</TT></B>

<P>Typical contents of TEMP.BAT:
<BR><B><TT>Error - Can't open input file: Volume in drive C is MS-DOS</TT></B>

<P>If you use EXPAND, you must create an ERROR.BAT that references your
data starting at %6.
<BR><B><FONT COLOR="#993366">The best part about using the error message
from EXPAND is that it ignores all blank lines in the input data file.</FONT></B>
<BR>
<HR WIDTH="100%">

<P><A NAME="attrib"></A><B><FONT SIZE=+1>ATTRIB</FONT></B> Accepts single
command-line argument only. If more than one argument is supplied, an error
message will go to the screen and a zero-byte file will result from any
redirection. No input piping allowed. Argument must not be a file name.
Typical use:

<P><B><TT>ATTRIB one > TEMP.BAT</TT></B>
<BR>Contents of TEMP.BAT
<BR><B><TT>File not found - one</TT></B>

<P>Here is an example of what happens if multiple arguments are supplied:

<P><B><TT>E:\>ATTRIB one two > TEMP.BAT</TT></B>
<BR><B><TT>Parameter value not allowed - two&nbsp;</TT></B><FONT COLOR="#0000FF">
&lt;&lt; this is displayed on-screen</FONT>

<P><B><TT>E:\>dir TEMP.BAT</TT></B>

<P><B><TT>&nbsp; Volume in drive E is HDC1_TEST</TT></B>
<BR><B><TT>&nbsp; Volume Serial Number is 224B-B508</TT></B>
<BR><B><TT>&nbsp; Directory of E:\</TT></B>

<P><B><TT>TEMP&nbsp;&nbsp;&nbsp; BAT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
0&nbsp; 04-19-97&nbsp; 5:04p&nbsp; TEMP.BAT</TT></B>
<BR><B><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1 file(s)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
0 bytes</TT></B>
<BR><B><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0 dir(s)&nbsp;&nbsp;
9,578,496 bytes free</TT></B>

<P>If you use ATTRIB, you must create a FILE.BAT that references your data
at %4.
<BR><B><FONT COLOR="#993366">The ATTRIB error message might be used to
check that only one argument exists on a line of data, but the on-screen
error display may (or may not) be a problem.</FONT></B>
<BR>
<HR WIDTH="100%"><A NAME="fc"></A><B><FONT SIZE=+1>FC</FONT></B> Accepts
two command-line parameters only. No input piping. Neither argument should
be a file or device name. Outputs first argument. Typical use:

<P><B><TT>FC one two > TEMP.BAT</TT></B>
<BR>Contents of TEMP.BAT:
<BR><B><TT>File(s) not found : one</TT></B>

<P>If you use FC, you must create a FILE(S).BAT that references your data
at %4.
<BR><B><FONT COLOR="#993366">FC in this context is nearly useless and is
included only for completeness.</FONT></B>
<BR>
<HR WIDTH="100%">
<P><CENTER>Bad links? Questions? <A HREF="mail.htm">Send me mail</A>.</CENTER>
</BODY>
</HTML>
