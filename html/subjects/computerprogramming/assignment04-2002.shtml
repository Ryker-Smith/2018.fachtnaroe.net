<!DOCTYpE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!--#include virtual=/title.shtml" -->
	<link rel="stylesheet" type="text/css" media="screen" href="/style.css" />
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
<body>
<a name="top"></a>
<!--#include virtual="/navigation.shtml" -->
<div id="content">
<h1>Computer Programming</h1>
<><b><font COLOR=RED><big>NB</big> A WORK IN PROGRESS <big>NB</big></font></b></>
<h2>C Programming Assignment #4</h2>
<hr>
<h2>brief</h2>
Your target is to create a simple text-based, mind-challenge game. For the player, the object of the game is to guess a word chosen at random from a dictionary. This is an implementation of the classic '<I>hangman</I>'.

<h2>Informative:</h2>
This a task based on a classic game style. Though the implementation may initially sound quite easy, there are challenges within this game that will take some thinking about. (Though this warning may make the task sound rather difficult, this is actually a very manageable program).

<p>
There are no fancy graphics, as it emulates a type of game written when fancy graphics were not possible. There is little complicated program structure, as earlier systems were less powerful than modern ones. 

<p>The guessing of the word occurs one letter at a time, until either all of the letters in the word have been guessed or too many guesses have occurred and the player loses.
<h2>Your Task:</h2>
The program consists of 3 main tasks:
<ol TYPE=1>
<li><b>Internal (hidden) setup:</b>
<ul>
<li>Write a program that reads in a series of strings from a file. The strings are the words of the dictionary. The strings are then stored in a one-dimensional array.
<li>
One of the words in the array will then be chosen at random, and will become the basis for the game. To choose a word randomly, choose a random number and use the word in the array that corresponds with that number.
</ul>
<li><b>External (visible) setup:</b>
<ul>
<li>Clear the existing screen and the draw the game screen. This consists of:
<ul>
<li>Prompt section (accepts input)
<li>Text feedback section (returns messages to the user)
<li>Word status section (shows the word being guessed - this should start with a blank, or hidden word (eg underscores or stars instead of letters, one star per letter of the word).
<li>Guessed section (shows letters already guessed). You could choose to be more user-friendly and show letters remaining instead.
<li>Scaffold section (this isn't actually necessary, but some form of feedback about remaining tries should be provided. You can try to draw a person on screen, but it would be a lot easier to just display the number of remaining guesses).
</ul>
</ul>
<li><b>Game Loop:</b>
<br>
<ul>
<li>Once the setup has been completed the program should enter a loop in which program awaits keyboard input and then acts upon it.
The list of expected inputs and actions is given here:
<ul>
<li>'a'..'z' and 'A'..'Z' are guesses
<li>'0' (zero) is the quit instruction
<li>Any other symbol is an error and should be handled appropriately
</ul>

<li>The program should continue until a valid terminating condition is reached.
</ul>
</OL>
<h2>Useful links:</h2>
For anyone able to read English well, and to reason their way through computer documentation independently, you can gain a head start by read the manual by typing: 
<br>
<pre>man ncurses</pre>
at the linux prompt (which includes cross references to many other man pages), or by reading up on the new curses library on the internet. 
<p>
There is a document by <a HREF="http://sunse.jinr.dubna.su/local/ncurses/ncurses-intro.html">Eric S. Raymond</a> which might be too good, as he writes C like a native(!). The ncurses package is based upon the curses package, which has a page <A HREF="http://hoth.stsci.edu/man/man3X/curses.html">here</a> but has some dodgy links.

<h2>Support Materials:</h2>

<ol>
<li>This is the file <b>readdict.c</b> which will open, read and store the contents of the dictionary file in an array.
<pre>
#include &lt;stdio.h&gt;
#include &lt;curses.h&gt;
#include &lt;string.h&gt;
#define MAX_WORDS 100
#define MAX_CHARS 20

/* This program will give three compilation warnings:
	readdict.c: In function `read_dictionary':
	readdict.c:32: warning: assignment makes integer from pointer without a cast
	readdict.c:37: warning: passing arg 3 of `fgets' makes pointer from integer without a cast
	readdict.c:55: warning: passing arg 1 of `fclose' makes pointer from integer without a cast
   The line numbers may be different for you. You may ignore these warnings; all other errors are your problem.  :-) 
*/

char *dictionary[MAX_WORDS];
int wordcount;

main ()
{
 read_dictionary ();
}

int read_dictionary ()
{
 /* the file-handle variable to access the file is called dfile
    looper is the control variable that controls the reading in of the words of the dictionary
    oneline is a local variable into which each map line is read, prior to being copied into the dictionary.
 */
 int dfile, looper;
// printf ("[start]\n");
 char oneword[MAX_CHARS];
 /* The man pages fully document the use of the fopen command
    the first parameter is the filename containing the dictionary. The second is the access mode - in this case read-only.
    The file should *not* *not* *not* be a DOS-mode file (with CR, LF line endings). This code won't work properly
    if it is. Use the linux system and vi to create the map file. Use a different file name if you wish.
    The file must exist, or a crash will occur as no error checking has been included (lazy programmer)
 */
 dfile = fopen ("dictionary.dat", "r");
 looper = 0;
 /* The loop executes until no more (a NulL quantity) of characters are available to be read. This signifies EOF.
    The second parameter here specifies the number of characters +1 that should be read in. Don't forget the EOL marker!
 */
 while (fgets (oneword, MAX_CHARS + 1, dfile) != NulL)
 {
  /* Allocate memory for the word in the dictionary array
  */
  dictionary[looper] = (char *) malloc (MAX_CHARS + 1);
  /* This next line prematurely ends the string to overwrite the CR code. The CR code isn't part of the
     word and is being stripped out.
  */
  oneword[strlen(oneword)-1] = '\0';
  /* Once read into the temporary array called oneword, the word is copied into the dictionary array.
     Simply assigning oneword into the array doesn't work, the strcpy command has to be used.
  */
  strcpy (dictionary[looper], oneword);
//  mvprintw (looper, 1, "%s", dictionary[looper]);
  // This line is for initial debugging only. It shows what's happening....
  printf ("LENGTH: {%2d} WORD:{%12s}\n", strlen(oneword), dictionary[looper]);
  looper ++;
  refresh;
 }
 // Close the file once finished with it
 fclose (dfile);
 // The variable wordcount now tells us how many words are in the dictionary
 wordcount = looper;
 printf ("TOTAL WORDS: {%2d}\n", wordcount);
}
</pre>
<li>Modify the above program so that it includes a suitably named function to select a word at random from the dictionary. For initial debugging purposes this word should then be displayed on screen.
<br><br><li>To compile a program that includes aspects of the ncurses library, you <em>must</em> use the <b>-lncurses</b> parameter with the <b>gcc</b> command.
<br><br>
<li>How to clear the screen:
<pre>#include &lt;curses.h&gt;
#include &lt;stdio.h&gt;
main ()
{
 initscr ();
 erase ();
 noecho ();
 refresh ();
 endwin ();
}
</pre>
Read <b>man curs_initscr</b> for more information.
<br><br><li>Some sample men to hang:
<pre>
   O
  -|-
  / \

     000
    00000
     000
      0
      0
0000000000000
      0
      0
      0
      0
     0 0
    0   0
   0     0
  0       0
</pre>
<li>To stop the program to accept input, but without requiring <i>enter</i> or <i>return</i> to be pressed use this code:
<pre>
#include &lt;curses.h&gt;
#include &lt;stdio.h&gt;
main ()
{
 char achar;
 initscr ();
 erase ();
 noecho ();
 refresh ();
 achar = getch ();
 printw ("You pressed: %c\n\n", achar);
 printw ("press another key to end this program");
 achar = getch ();
 endwin ();
}
</pre>
<li>With the ncurses library in use, just as you must use <b>initscr ()</b> to initialise the screen, you must also use <b>endwin ()</b> to close the windowing system. Try compiling and running the previous program without the <b>endwin ()</b> command. It will probably make a mess of you terminal screen. To recover, type <b>reset</b> at the command prompt.
<br><br>
<li>This sample program accepts coordinates and displays a <b>#</b> symbol where requested. Note the use of the <b>refresh ()</b> command after each screen activity. Comment out the <b>refresh ()</b> lines (with // at the start of the line) to see why the <b>refresh ()</b> command is used. Pay special attention to the <b>mvprintw ()</b> command.
<pre>
#include &lt;curses.h&gt;
#include &lt;stdio.h&gt;
main ()
{
 char achar;
 int Y, X, NotOver;
 initscr ();
 erase ();
 echo ();
 mvprintw (0,0,"This program will accept Y, X coordinates and then display a character at those coordinates. Enter the coordinates below, please. Enter 0,0 to quit. You will need to press return after each entry.");
 refresh ();
 NotOver = 1;
 while (NotOver)
 {
  mvprintw (3,1,"Enter Y coordinate:");
  refresh ();
  scanw ("%d", &Y);
  mvprintw (4,1,"Enter X coordinate:");
  refresh ();
  scanw ("%d", &X);
  refresh ();
  mvprintw (Y,X, "#");
  refresh ();
  if ((Y == 0) && (X == 0))
  {
   NotOver = 0;
  }
 refresh ();
 }
 endwin ();
}

</pre>
</ol>
<hr>
<h2>Documentation:</h2>
Provide evidence of your planning process, the commented source code and sample data used. You should also include a SmartDraw flow-chart. Any other appropriate documentation may be included if you wish. The submission should be preceeded with a signed copy of the <A HREF="/subjects/computerprogramming/idunit-c20013.pdf">my own work</A> form.

<h2>Due Date:</h2>
TBA
<p>
More information will follow.
</div>
</body>
</html>
