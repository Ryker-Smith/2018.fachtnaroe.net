<!DOCTYPE html>
<!-- #exec cgi="/head.shtml" -->
<body>
<!-- #exec cgi="/inprogress.shtml" -->
<div id="pagewrap">
<!-- #exec cgi="/topmenu.shtml" -->
<!-- #exec cgi="/sidemenu.shtml" -->
<div id="content">
<h1>Maze Game: Sample Program</h1>
<h2>0406.pl</h2>
<pre>
#!/usr/bin/perl
use strict;
require Term::Screen;
use Time::HiRes qw (usleep);
#
# To student:
# Note that this program uses literals where variables and
# constants should be used - fix this after copying!
#
# Only try patching this code into your program *after*
# tonic/poison/exit handled fully and correctly
#
my $notover = 1;
my $count = 1;
my $keystroke;
# Locate bad guy (for demo purposes only, using literal values)
my $badguy = "B";
my $badx = 37;
my $bady = 6;

# Init screen
my $scr=new Term::Screen;
$scr-&gt;clrscr();

# Open and read map file
open LAUNDRYBASKET, "&lt; mapfile.txt";
my @map = &lt;LAUNDRYBASKET&gt;;
close LAUNDRYBASKEY;
  
# Draw map on screen, putting copy in mem for reference
my $x = 0;
my $y = 0;
my ($line, @items, $smellycat, @biggerdeeperwidermap);

foreach $line (@map) {
  chomp $line; # Eat any EOL from the file
  # Map uses ':' to separate chars; all chars including spaces must be separated leading to:
  #  such as this =: :=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=: :=:
  @items = split(':', $line);
  push @biggerdeeperwidermap, [@items];
  $x = 0; # Failure to reset x leads to map flowing to right over successive lines
  # Coords in paterrn Y,X - DONT FORGET!
  foreach $smellycat (@items) { 
    $scr-&gt;at($y, $x)-&gt;puts($smellycat);
    $x++;
  }
  $y++;
}

# Start main loop ('game') until end (eq "Q" or "q")
while ($notover) {
  if ($scr-&gt;key_pressed()) {
    $keystroke = $scr-&gt;getch();
    if (($keystroke eq "q") || ($keystroke eq "Q")) {
      $notover = 0;
    }
  }
  $scr-&gt;at($bady,$badx)-&gt;puts($badguy)-&gt;at(20,0); # MAKE CURSOR 'DISAPPEAR' after positioning???
  $count++;
  usleep (100000);
  &amp;moveman();
}	

sub moveman () {
  # Move the bad guy 
  # [snicker] much more evillor than skeletor
  my $moved = 0;
  my $newy = $bady;
  my $newx = $badx;
  my $dir;
  
  # use $moved as a semaphore
  my $random = int(rand(100))+1; # This I is so A it's I all over again &lt;:{}
  # To student: how does the bad guy 'decide' how to move?
  if ($random % 2) {
    if ($biggerdeeperwidermap[$bady-1][$badx] eq " ") { # Move up?
      $moved = 1; $dir="UP"; $newy -= 1;
    }
    elsif ($biggerdeeperwidermap[$bady][$badx+1] eq " ") { # Move right?
      $moved = 1; $dir="RIGHT"; $newx += 1;
    }
  }
  else {
    if ($biggerdeeperwidermap[$bady+1][$badx] eq " ") { # Move down?
      $moved = 1; $dir="DOWN"; $newy += 1;
    }
    elsif ($biggerdeeperwidermap[$bady][$badx - 1] eq " ") { # Move left?
      $moved = 1; $dir="LEFT"; $newx -= 1;
    }
  }
  # Did we find a place to move to?
  if ($moved == 1) {
    $scr-&gt;at($bady, $badx)-&gt;puts(" ");
    $bady = $newy;
    $badx = $newx;
    $scr-&gt;at($bady, $badx)-&gt;puts("B");
  }
  # This is debug stuff:
  $scr-&gt;at(40,40)-&gt;puts("$badx, $bady, $dir")-&gt;clreol();
} # endsub moveman
</pre>
<form><input type="button" value="Back" onclick="history.back()"></form>
<small><!--#config timefmt="%Y%m%d-%H:%M" -->Last updated: <!--#flastmod file="baddyfromvps3-01.pl.shtml" --></small>
</div> <!-- #content -->
<!-- #exec cgi="/bottom.shtml" -->
</div> <!-- #pagewrap -->
</body>
</html>
