<!DOCTYPE html>
<!-- #exec cgi="/head.shtml" -->
<body>
<!-- #exec cgi="/inprogress.shtml" -->
<div id="pagewrap">
<!-- #exec cgi="/topmenu.shtml" -->
<!-- #exec cgi="/sidemenu.shtml" -->
<div id="content">
<h1>Perl - Part 11</h1>
<!--#include virtual="/subjects/computerprogramming/perl/navigate.shtml" -->
<h2>Repitition</h2>
<p>There is a saying, worth remembering, that "Computers don't get happy and they don't get sad; they just run programs". This is true, and is one of the reasons that computers are so useful in the first place; they are able to run a tedious program forever without getting bored. Therefore we have mechanisms that allow us to write programs that carry out an action more than once.<p>
<h2>The WHILE Construct</h2>
<p>In Perl there are:
<ol>
<li>while</li>
<li>do..while</li>
<li>for</li>
</ol>
available as repitition control structures. We will try to only use the <b>while</b> construct (No. 1 above) as it can be used to carry out the functions of the other two constructs with only <sup>1</sup>/<sub>3</sub> of the learning effort!<p>
<h2>General form of the while statement</h2>
<p>The general form of the while statement, without specific variables is:</p>
<font face="Courier" >
<br>&nbsp;&nbsp;initialize control_variable;
<br>&nbsp;&nbsp;while (condition remains TRUE based on value of control_variable)
<br>&nbsp;&nbsp;{
<br>&nbsp;&nbsp;&nbsp;&nbsp;Carry out all actions enclosed in the block defined by the brackets;
<br>&nbsp;&nbsp;&nbsp;&nbsp;Progress the loop: the while test eventually yields FALSE and the loop ends;
<br>&nbsp;&nbsp;}
</font>
<h2>Task 010</h2>
<p>This is a sample program. It reads in numbers, printing a running total of the numbers entered each time the loop goes around (an 'iteration'). When the value entered is 0, the loop stops.</p>
<center><a href="/images/while01.png"><img width="100%" border="0" src="/images/while01.png"></a></center>
<p>The source code for this program is here. Make sure you understand it before moving on.</p>
<font face="Courier" >
<p>#!/usr/bin/perl
<br>&nbsp;&nbsp;# Identify the author and present a few blank lines
<br>&nbsp;&nbsp;print "\n\nBy Fachtna Roe:\n\n";
<br>&nbsp;&nbsp;#Initialize the totalling valiable to 0
<br>&nbsp;&nbsp;$running_total = 0;
<br>&nbsp;&nbsp;# Initialise the controlling variable to any value other than 0
<br>&nbsp;&nbsp;$entered = 1; 
<br>&nbsp;&nbsp;while ($entered != 0)
<br>&nbsp;&nbsp;{
<br>&nbsp;&nbsp;&nbsp;&nbsp;print "Please enter a number, or '0' to stop: ";
<br>&nbsp;&nbsp;&nbsp;&nbsp;$entered = &lt;STDIN&gt;;
<br>&nbsp;&nbsp;&nbsp;&nbsp;chop $entered;
<br>&nbsp;&nbsp;&nbsp;&nbsp;$running_total = $running_total + $entered;
<br>&nbsp;&nbsp;&nbsp;&nbsp;print "The total so far is: $running_total.\n";
<br>&nbsp;&nbsp;}
<br>&nbsp;&nbsp;print "\nProgram ends!\n";
</font>
<h2>Task 011</h2>
<p>Modify the program above to print the square of the number entered as each iteration occurs. Do not remove any existing functions.</p>
<h2>Task 012</h2>
<p>Further modify the program to print, at the end, how many numbers (excluding the 0) were entered.<p>
<h2>Numeric comparison</h2>
<p>Notice how when we compare the variable $entered with 0 that we use the symbol <b>!=</b> meaning 'not equal to'. We could have used <b>ne</b> and Perl would have forgiven us; but technically if would be incorrect to do so. Perl, unusually, has a different set of comparison operators for numbers than it has for text. Mostly the text operators <i>seem</i> to work for numeric comparison but be aware that both sets exist. These are the numeric comparators, which should make sense at a glance:
<ul>
<li>&lt;</li>
<li>&lt;=</li>
<li>==</li>
<li>!=</li>
<li>&gt;=</li>
<li>&gt;</li>
</ul>
<h2>Task 014</h2>
<p>This program is one which might normally be written with a <b>for</b> loop. If you've done programming previously and know what that is, that's good for you. Otherwise, please erase the last sentence from your mind. This program performs numeric calculations in a sequential fashion. It shows again the power of the computer to perform a repetitive task, but this time with values that we more directly control.</p>
<center><a href="/images/while02.png"><img border="0" width="100%" src="/images/while02.png"></a></center>
<p>Sample output from the program is shown here:
<p>
<center><img width="90%"  src="/images/while02-pl.png" /></center>
<br>
<h2>Task 015</h2>
<p>The last program counts upwards in steps of 1 at a time. Modify the task to ask from the user the start value, the end value and the step count by which the program should progress, and then make the program move forward by that step count each time. To ensure that a suitable (&gt;0) value is entered use an IF statement (possible with a matching ELSE) to ensure that a positive value greater than zero is entered; if an unsuitable value is entered just use a a step count of 1.</p>
<ol>
<li>For extra kudos, you can use a WHILE construct instead of an IF construct, forcing the user to stay at the step count entry part of the program until a suitable value is entered. This is optional</li>
<li>For <u>real</u> kudos, use a similar WHILE mechanism to ensure that the starting value is <i>lower</i> than the ending value. This also is optional.</li>
</ol>
<p>More anon...
<!--#include virtual="/subjects/computerprogramming/perl/navigate.shtml" --></div>
<small><!--#config timefmt="%Y%m%d-%H:%M" -->Last updated: <!--#flastmod file="perl-part11.shtml" --></small>
</div> <!-- #content -->
<!-- #exec cgi="/bottom.shtml" -->
</div> <!-- #pagewrap -->
</body>
</html>
