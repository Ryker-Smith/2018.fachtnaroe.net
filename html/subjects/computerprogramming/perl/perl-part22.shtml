<!DOCTYPE html>
<!-- #exec cgi="/head.shtml" -->
<body>
<!-- #exec cgi="/inprogress.shtml" -->
<div id="pagewrap">
<!-- #exec cgi="/topmenu.shtml" -->
<!-- #exec cgi="/sidemenu.shtml" -->
<div id="content">
<h1>Perl - Part 22</h1>
<!--#include virtual="/subjects/computerprogramming/perl/navigate.shtml" -->
<h2>Is it a bird? Is it a plane? No its a...nothing; just a darn Database.</h2>
<p>Our problem in the last pair of programs was that we are dealing with a small database: because of this when dealing with the data we are going to have to apply consistency to what we do in terms of input and output.</p>
<p>Specifically, the first program wrote out the names and numbers alternately and in pairs (each name followed by the correct number).</p>
<p>When we went to read in the names and numbers we used a different method - the only one we currently know. The use of <font face="Courier"> @all_the_names = &lt;NAMESFILE&gt;;</font> inputs <b>*all*</b> file data into the array. That's the purpose of that construct: to get a whole file into an array in one line. So when the line <font face="Courier">@all_the_numbers = &lt;NAMESFILE&gt;;</font> shows up the file is already considered to be 'empty' - everything has already been read from it. We could <b>close</b> and re-<b>open</b> the file and fill the numbers array that way, but that isn't a solution. That would put the same contents into the numbers array as are already in the names array.</p>
<p>The fact that the numbers array fills from a pre-read (or 'empty') file explains why when we run program names04b.pl we get a blank for every second value. The numbers array is empty.</p>
<p>That we are alternately getting names and numbers can be attributed to the first line that reads in the file contents. It reads the contents indiscriminately, names and numbers, into the names array. Simply calling the array after 'names' doesn't automatically limit the contents to names, or even to text.</p>
<p>Finally(ish), notice that though there are 5 names and 5 numbers that 10 pieces of information are *not* put on screen by program names04b.pl - since the data is printed to screen using a loop controlled by the value of <b>$max</b> which is preset to 5. Therefore, though there is more data in the names array it never gets to be put on screen. We will need to cope with this also. To see the significance of this, change the value of $max to 10, run the program and see the difference. (You might even try changing it to 15 and see the effect).</p>
<h2>Dealing with the Database</h2>
<p>What we need is a better method of accepting and storing the names and numbers, plus any other data we like; we then need to have an equivalent method to retrieve that data and re-construct it in the original order and fashion. We also need to recognise that we are not dealing with random bits of data. The name and number are each a <b>field</b> of a Database, and that each name/number pair is a <b>record</b> in that Database. These definitions are the sames as those you've been given in, well, Databases; so nothing new there then.</p>
<p>We can think of the structure of the record as being like this:</p>
<ul>
	<li>START_DATABASE</li>
	<ul>
		<li>Other records</li>
		<li>START_RECORD</li>
			<ol>
				<li>FIELD: Name</li>
				<li>FIELD: Number</li>
				<li>Other fields may be present...</li>
			</ol>
		<li>END_RECORD</li>
		<li>Other records may be present...</li>
	</ul>
	<li>END_DATABASE</li>
</ul>
<p>What we can do is save the data in a file using a <a href="http://en.wikipedia.org/wiki/Flat_file_database">flat file database</a> structure. This means that each line will represent one record, and is a well established mechanism for solving the minor problem we face here, as the previous link will explain.</p>
<p>We shall read in the names, the numbers <i>&amp; and any other data</i>. We shall join (or <a href="http://dictionary.reference.com/browse/concatenate">concatenate</a>) the fields so they can be saved onto one line (one record). We will place between the fields a special character of our choosing before writing the records to disk. All of these will then be joined into one line with the concatenate ('.' or 'dot') operator.</p>
<p>Then, when we re-read the records this special character will enable us to <font face="Courier">split</font> the records back from being one line into being separate fields again. Thus we will be able to store, reload and re-use the data as required.</p>
<p>Now to make the great plan real....</p>
<!--#include virtual="/subjects/computerprogramming/perl/navigate.shtml" -->
<small><!--#config timefmt="%Y%m%d-%H:%M" -->Last updated: <!--#flastmod file="perl-part22.shtml" --></small>
</div> <!-- #content -->
<!-- #exec cgi="/bottom.shtml" -->
</div> <!-- #pagewrap -->
</body>
</html>
