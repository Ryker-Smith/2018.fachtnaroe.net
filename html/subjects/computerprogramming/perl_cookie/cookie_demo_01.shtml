<!DOCTYPE html>
<!-- #exec cgi="/head.shtml" -->
<body>
<!-- #exec cgi="/inprogress.shtml" -->
<div id="pagewrap">
<!-- #exec cgi="/topmenu.shtml" -->
<!-- #exec cgi="/sidemenu.shtml" -->
<div id="content">
<h1>Cookie 01</h1>
<p>This demo shows how the contents of input fields can be <a href="http://progserv.fachtnaroe.net:1918/~fachtna/cookie_01.html"> saved and later retrieved using cookies</a>.</p>
<p>This is the input form:</p>
<pre>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Cookie demo #01&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h2&gt;Set cookie&lt;/h2&gt;
&lt;p&gt;Enter text in the first box, choose an expiry time in the second&lt;/p&gt;
&lt;form action="cgi-bin/cookie_01.pl" method="post"&gt;
&lt;input type="text" name="field_1"&gt;
Cookie expires after &lt;select name="field_2"&gt;
&lt;option value="1"&gt;1&lt;/option&gt;
&lt;option value="2"&gt;2&lt;/option&gt;
&lt;option value="5"&gt;5&lt;/option&gt;
&lt;option value="10"&gt;10&lt;/option&gt;
&lt;option value="30"&gt;30&lt;/option&gt;
&lt;option value="45"&gt;45&lt;/option&gt;
&lt;/select&gt; minutes
&lt;input type="submit" value="Press to send cookie"&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p>This is the perl program:</p>
<pre>
#!/usr/bin/perl -T
use strict;
use CGI;
use CGI::Carp qw(fatalsToBrowser);
use CGI::Cookie;

our (%in); # This is the variable used by CGI::ReadParse below
CGI::ReadParse(); # Tell the module to 'parse' the form 
my ($field1, $field2, $set_cookie, $retr, $got_back, %get_cookie);
$retr = 0;
$retr = $in{retrieve};
# are we setting or retrieving?
if ($retr eq "Yes") {
  &amp;content_type;
  # First get our cookies
  %get_cookie = CGI::Cookie-&gt;fetch;
  &amp;html_top("Cookie recovery");
  # Now see if the cookie we want is empty
  $got_back=$get_cookie{I_HAVE_TO_CALL_THIS_SOMETHING};
  if ($got_back ne "") {
    # non-empty, safe to get the value
    $got_back=$get_cookie{I_HAVE_TO_CALL_THIS_SOMETHING}-&gt;value;
    print "I got back [$got_back] from the cookie";
  }
  else {
    print "Cookie missing or expired";
  }
  &amp;html_tail;
}
else {
  $field1 = $in{field_1};
  $field2 = $in{field_2};
  if ($field1 ne "") {
    # enforce arbitrary max and min
    if ($field2 &lt; 1) {
      $field2 = 1;
    }
    elsif ($field2 &gt; 45) {
      $field2 = 45;
    }
    $field2= "+".$field2."m";
    # mustn't send content_type before cookie
    $set_cookie = CGI::Cookie-&gt;new(
                               -name=&gt;'I_HAVE_TO_CALL_THIS_SOMETHING',
                               -value=&gt;$field1,
                               -expires=&gt;$field2); # expire in 30mins
    $set_cookie-&gt;bake; # send the cookie
    &amp;html_top("Cookie set");
    print "I have set a cookie containing [$field1] expiring after [$field2] minutes.";
    # by only specifying a parameter, the same .pl program will be called
    print "&lt;br&gt;Click &lt;a href=\"?retrieve=Yes\"&gt;here&lt;/a&gt; to fetch it back.";
    &amp;html_tail;
  }
  else {  
    &amp;content_type;
    &amp;html_top('Enter some text');
    print "Please enter some text&lt;br&gt;&lt;a href=\"javascript:history.back()\"&gt;back&lt;/a&gt;";
    &amp;html_tail;
  }  
}

sub content_type {
# standard html content-type string
  print "Content-Type: text/html\n\n";
}

sub html_top {
# print generic html header 
# Expects: String to use as a title value
  print "&lt;!DOCTYPE html&gt;\n&lt;html&gt;&lt;head&gt;\n&lt;title&gt;";
  print @_;
  print "&lt;/title&gt;\n";
  print "&lt;/head&gt;\n&lt;body&gt;\n";
}

sub html_tail {
# print generic html ending
  print "\n&lt;/body&gt;\n&lt;/html&gt;\n";
}

</pre>
<small><!--#config timefmt="%Y%m%d-%H:%M" -->Last updated: <!--#flastmod file="cookie_demo_01.shtml" --></small>
</div> <!-- #content -->
<!-- #exec cgi="/bottom.shtml" -->
</div> <!-- #pagewrap -->
</body>
</html>
