<!DOCTYPE html>
<!--#include virtual="/includes/head.shtml" -->
<body onload="onloadProc()">
<!--#include virtual="/includes/inprogress.shtml" -->
<!--#include virtual="/includes/animation.shtml" -->
<div id="pagewrap">
<!--#include virtual="/includes/sitename.shtml" -->
<div id="topstripe"></div>
<!--#include virtual="/includes/sidemenu.shtml" -->
<div id="content">
<!--#include virtual="/includes/topblurb.shtml" -->
<h1>Formatting the Receipt Attractively (CLI operation)</h1>
<h2>Coping with Variable Width Data</h2>
<p>Taking this assignment as an example, one of the problems with output is making it seem appropraite and attractive.</p>
<p>In this case we'd like to present a receipt on screen. Ideally a recipt array might also be used for other purposes but for now, formatting is a big enough job.</p>
<p>The crux of the problem is that we would like two neat columns side by side. The first with the product descriptions, the second with the prices. This becomes a problem because we can't know in advance the length of the product description, or necessarily the number of characters in the price.</p>
<p>In Word Processing you could define a left tab for the left of the recipt, and a decimal tab for the numbers. Not so in this case, where all we appear to have is the slightly unpredictable <b>\t</b> command, which you should try first, as it may work for you.</p>
<p>The problem breaks down to this:</p>
<ol>
	<li>Whatever the length of the description, we want to pad it with spaces <i>on the right hand side</i> to make each description the same effective width.</li>
	<li>Whatever the number of characters, we want to pad the price with spaces <i>on the left hand side</i> to make the prices line up correctly.</li>
	<li>Step 2 above assumes that each price has the <a href="formatnumbers.shtml">same number of places after the decimal point</a> in order to gain a neat columnar effect.</li>
</ol>
<h2>How long is <i>your</i> piece of string?</h2>
<p>If the above steps are followed we should have a perfectly standard receipt format; the only tricks are knowing the numbers of characters in use and then knowing how to pad as required!</p>
<p>Take the following as an example. If three items are placed on the receipt using no formatting they'll probably look similar to this:</p>
<font face="Courier">
<br>&nbsp;&nbsp;DESCRIPTION&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PRICE
<br>&nbsp;&nbsp;DVD-R 5's&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.99
<br>&nbsp;&nbsp;650W Power Supply&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45.5
<br>&nbsp;&nbsp;Vanilla Candles&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.25
<br>
</font>
<p>Clearly, this displays the relevant data and is functional in that respect, but there are few marks to be had for screen presentation from this!</p>
<p>The first trick is to decide the <b>Desired_Width</b> of the column for the descriptions. Then determine the length of the description in any given line. Work out many characters are short from the width. Then print that number of spaces. That then moves the prices column an even distance across the screen, allowing you to format that properly later.</p>
<p>You could print this as a formula like this....</p>
<center><font face="Courier">Spaces_To_Print = Desired_Width - Description_Length</font></center>
<p>The key thing is to determine the <b>Description_Length</b> for each line. Thankfully all programming languages provide a tool to get the length (in characters) of a string. To confuse the enemy it's called the <font face="Courier">length</font> function. You can see it in use in this program sample (which you may try under the name <font face="Courier">length01.pl</font> if the operation of the function isn't immediately clear).</p>
<center><img width="100%" src="/images/length01.png"></center>
<h2>In Spaces nobody can hear you scream</h2>
<p>OK. So thats the easy bit: working out the spaces required. You now know the <b>Spaces_To_Print</b> value from the earlier formula. Off you go, that's easy; just a little thought required to print the correct number of, well, spaces....</p>
<p>One way to do this is as something like follows:</p>
<font face="Courier">
&nbsp;&nbsp;# Based on the formula above...
<br>&nbsp;&nbsp;# and assuming $description[counter] is the description matching
<br>&nbsp;&nbsp;# a barcode you've just read. Plinka plonka ploody pou.
<br>&nbsp;&nbsp;# PS: You wouldn't normally use CAPITAL letters in a variable name.
<br>&nbsp;&nbsp;$Spaces = $Col_Width - length $description[counter];
<br>&nbsp;&nbsp;$sp_count = 1;
<br>&nbsp;&nbsp;while ($sp_count &lt; $Spaces) 
<br>&nbsp;&nbsp;{
<br>&nbsp;&nbsp;&nbsp;&nbsp;print " "; # print just one space (at a time)
<br>&nbsp;&nbsp;&nbsp;&nbsp;$sp_count++;
<br>&nbsp;&nbsp;}
</font>
<br>
<h2>Follow the money...</h2>
</p>Use the information on <a href="formatnumbers.shtml">number formatting</a> to set up the neat column of numbers. But instead of something like <font face="Courier">%3.2f</font> as formatting information change the <font face="Courier">3</font> to a trial value of, say, <font face="Courier">7</font> and all your numeric output will occupy a tidy 7 spaces.</p>
<p>If all goes well, expect output like this:</p>
<font face="Courier">
<br>&nbsp;&nbsp;DESCRIPTION&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PRICE
<br>&nbsp;&nbsp;DVD-R 5's&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.99
<br>&nbsp;&nbsp;650W Power Supply&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45.50
<br>&nbsp;&nbsp;Vanilla Candles&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.25
<br>
</font>
<br>
<center>
<form>
<input type="button" value="Back" onclick="history.back()"></form>
</center>
<small><!--#config timefmt="%Y%m%d-%H:%M" -->Last updated: <!--#flastmod file="receipt.shtml" --></small>
</div> <!-- #content -->
<!--#include virtual="/includes/backtotop.shtml" -->
</div> <!-- #pagewrap -->
</body>
</html>
