<!DOCTYPE html>
<!--#include virtual="/includes/head.shtml" -->
<body onload="onloadProc()">
<!--#include virtual="/includes/inprogress.shtml" -->
<!--#include virtual="/includes/animation.shtml" -->
<div id="pagewrap">
<!--#include virtual="/includes/sitename.shtml" -->
<div id="topstripe"></div>
<!--#include virtual="/includes/sidemenu.shtml" -->
<div id="content">
<!--#include virtual="/includes/topblurb.shtml" -->
<h1>Control Systems Code Sample 03</h1>
<p>This is a more comprehensive starting point for the Traffic Light Control Program project.<br><b>Note, use as a starting program only, as it is unfinished ...</b></p>
<pre>
/* This is a starting point program only. You'll still have to finish it!

Program: Starting the Traffic Controller
Author:  faROE
Date:    2014/03
Status:  unfinished
*/

// set to value of pin with sensor (emulated by switch) attached
int sidePin = 0;
int trafficOverridePin = 0; // used by fire station
int lightSensorPin=0;

// These are the test values for the input pins, change as required
const float carPassing=1;
const float trafficOverride=1;
const float nightLightLevel=1;

// colours, use values from earlier task 2
const int red = 0;
const int amber = 0;
const int green = 0;
const int off = 0;

// times to pause for after events
const int fireDelay=0;
const int nightDelay=0;
const int sideDelay = 0;

// other constants
const int maxCars=3;

void setup () {
  
}

void loop () {
  int sideCount;
  
  if (fireSignal() == 1) {
    mainLight(red);
    sideLight(red);
    delay(fireDelay);
    mainLight(green);
  }
  else {
    if (nightTime() == 1) {
      // first make both lights amber
      mainLight(amber);
      sideLight(amber);
      // wait a moment ...
      delay(nightDelay);
      // now turn off to generate flashing
      mainLight(off);
      sideLight(off);
    }
    else {
      if (blip() == 1) {
        sideCount++;
        if (sideCount &gt;= maxCars) {
          mainLight(red);
          delay(sideDelay);
          sideLight(green);
          delay(sideDelay);
          sideCount=0;
          sideLight(red);
          delay(sideDelay);
          mainLight(green);
        }
      }
    }
  }
}

int blip () {
  // this may be better done with digitalRead
  float signal=analogRead(sidePin);
  if (signal &gt;= carPassing) {
    return 1;
  }
  else {
    return 0; 
  }
}

int fireSignal () {
  // We can emulate what ever system the fire station might
  // use with just another switch.
  // Do this with digitalRead?
  float signal=analogRead(trafficOverridePin);
  if (signal &gt;= trafficOverride) {
    return 1;
  }
  else {
    return 0; 
  }
}

void mainLight (int color) {
  // We send the correct code to the mainLight RGB led here. There
  // would obviously be individual lights in a real system, but that's
  // only a matter of changing the code to match the circuit.

}

void sideLight (int color) {
  // We send the correct code to the sideLight RGB led here. There
  // would obviously be individual lights in a real system, but that's
  // only a matter of changing the code to match the circuit.
  
}

int nightTime () {
  // use LDR (light dependent resistor) to sense night time
  // Check whether analog or digital read?
  float signal=analogRead(lightSensorPin);
  if (signal &lt;= nightLightLevel) {
    return 1;
  }
  else {
    return 0; 
  }
}
</pre>
<small><!--#config timefmt="%Y%m%d-%H:%M" -->Last updated: <!--#flastmod file="SDL_cursor_01.shtml" --></small>
</div> <!-- #content -->
<!--#include virtual="/includes/backtotop.shtml" -->
</div> <!-- #pagewrap -->
</body>
</html>
