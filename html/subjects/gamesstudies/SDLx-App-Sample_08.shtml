<!DOCTYPE html>
<!--#include virtual="/includes/head.shtml" -->
<body onload="onloadProc()">
<!--#include virtual="/includes/inprogress.shtml" -->
<!--#include virtual="/includes/animation.shtml" -->
<div id="pagewrap">
<!--#include virtual="/includes/sitename.shtml" -->
<div id="topstripe"></div>
<!--#include virtual="/includes/sidemenu.shtml" -->
<div id="content">
<!--#include virtual="/includes/topblurb.shtml" -->
<h1>Including projectiles</h1>
<p>This sample shows the beginnings of one method to add projectiles - bomb from a bad guy and rocket from a good guy - in a generic space game (falling-blocks).</p>
<p>This uses random numbers to 'AI' the choice to drop; adds handlers for the projectiles; removes handlers when done; tests for collision between objects (bomb/rocket) and things (good or bad guy).</p>
<pre>
...SNIP..

# Add event handler for  main/start items only
$quit_event_handle=$application-&gt;add_event_handler( \&amp;quit_event);
$key_event_handle=$application-&gt;add_event_handler(\&amp;key_event);
$move_alien_handle=$application-&gt;add_move_handler( \&amp;move_alien);
$show_alien_handle=$application-&gt;add_show_handler( \&amp;show_alien);

...SNIP

$application-&gt;run();

...SNIP

sub move_alien {
  my ($step, $app, $t) = @_;
  # calculate where the bad guy will go
  $old_x = $alien_x;
  $alien_x+=$alien_step;
  # will stay between x-&gt;50,650
  if ($alien_x &gt; 650) {
    $alien_x = 650;
    $alien_step *= -1
  }
  elsif ($alien_x &lt; 50) {
    $alien_x = 50;
    $alien_step *= -1  
  }
  my ($drop);
  # $dropping is global, to avoid trying to drop two bombs at once
  if ($dropping == 0) {
    # for this demo there's c.1/10 chance we'll drop
    # This random number choice is our 'AI'
    $drop = int rand(10);
    if ($drop == 2) {
      # ok, dropping bomb, raise our flag
      $dropping = 1;
      # bomb comes from alien so X,Y based on that
      $bomb_y = $alien_y + $alien-&gt;h -10;
      $bomb_x = $alien_x + int($alien-&gt;w/2);
      # sound can't hurt?
      $bomb_sound = $sound_bomb-&gt;play('BombDropping_01.wav');
      # NB NB Now add two new handlers for the extra object - 
      # but keep their handler numbers in global variables
      $drop_control_move = $app-&gt;add_move_handler( \&amp;drop_bomb);
      $drop_control_show = $app-&gt;add_show_handler( \&amp;show_bomb);
    }
  }
}

...SNIP...

sub drop_bomb {
  my ($step, $app, $t) = @_;
  # this is the move handler for a bomb; it'll only be added to the 
  # handler list if a bomb is in flight
  # We can specify distance for math-based collision detection.
  my $blast_radius = 25;
  # we're using 'cover' squares so keep old y (the changing co-ordinate to hand)
  $old_bomb_y = $bomb_y; 
  if ($dropping == 1) {
    # this is an arbitrary cut-off for the drop
    if ($bomb_y &lt; 600) {
      $bomb_y += 15;
      # now call the distance measuring routine:
      if (&amp;distance_is($bomb_x, $bomb_y, $ship_x, $ship_y) &lt; $blast_radius) {
        print "Bang: Alien wins\n";
        $app-&gt;stop;
      }
    }
    if ($bomb_y &gt;= 600) {
      # if we get this far the bomb has dropped the max. allowed without
      # hitting; remove the event handlers, using the numbers saved when we added them
      $app-&gt;remove_move_handler($drop_control_move);
      $app-&gt;remove_show_handler($drop_control_show);
      # if there's a sound, stop it
      $bomb_sound = $sound_bomb-&gt;stop();
      # lower the $dropping flag
      $dropping = 0;
    }
  }
}

...SNIP...

sub show_bomb {
  my ($delta, $app) = @_;
  # do the drawing stuff for the bad guy's projectile (bomb);
  # This routine will be enabled in response to our code
  ...
}  

...SNIP...

sub key_event {
...
  # this demo is using 'spaxce' to fire
  if ($key_name eq "space") {
    # we don't want two shots in the air at once (yet!)
    if ($firing==0) {
      # raise a flag
      $firing = 1; 
      # the rocket is fired by the good guy, calculate start point from that
      $rocket_y = $ship_y- int ($ship-&gt;h/2);
      $rocket_x = $ship_x + int ($ship-&gt;w/2)-9;
      # maybe sound...?
      $rocket_sound = $sound_rocket-&gt;play('GunFire_01.wav');
      # add handlers, keep their handler numbers for later
      $fire_control_move = $app-&gt;add_move_handler( \&amp;move_rocket);
      $fire_control_show = $app-&gt;add_show_handler( \&amp;show_rocket);
    }
  }
...
}

SNIP...

sub move_rocket {
  my ($step, $app, $t) = @_;
  # my arbitrary distance for a hit
  my $blast_radius = 25;
  $old_rocket_y = $rocket_y;
  # first make sure flag is up (why???)
  if ($firing == 1) {
    if ($rocket_y &gt; -50) {
      # move rocket by whatever amt we wish
      $rocket_y -= 10;
      # call our distance measuring routine
      if (&amp;distance_is($rocket_x, $rocket_y, $alien_x, $alien_y) &lt; $blast_radius) {
        print "Bang: Player wins\n";
        $app-&gt;stop;
      }      
    }
    if ($rocket_y &lt; -50) {
      # if we get this far the rocket has reached the upper limit 
      # without a hit; remove the handlers using their numbers
      $app-&gt;remove_move_handler($fire_control_move);
      $app-&gt;remove_show_handler($fire_control_show);
      # stop the sound
      $fire_sound = $sound_rocket-&gt;stop();
      # lower the flag
      $firing = 0;
    }
  }
}

...SNIP...

sub show_rocket {
  my ($delta, $app) = @_;
  # do the drawing stuff for the players projectile.
  # This show handler will be added and removed (enabled/disabled)
  # as required by our code.
  ...
}

...

sub distance_is {
  # this isn't a handler; this is just a sub to calc.
  # the distance between an (object, thing).
  # the object can be a projectile, the thing can be a
  # good guy or bad guy
  # Usage: &amp;distance_is (X1, Y1, X2, Y2)
  my ($objectX1, $objectY1, $thingX2, $thingY2) = @_;
  # formula for distance between  two points is:
  # square root of (square(X2 - X1) + square(Y2 - Y1))
  # Using the object as point #1, bad guy as point #2
  my $distance = sqrt (($thingX2 - $objectX1)**2 + ($thingY2 - $objectY1)**2);
  # I don't mind the decimals for now
  $distance=int($distance);
  # for debuggin
  print "[$distance]\n";
  return $distance;
}

...SNIP...
</pre>
<small><!--#config timefmt="%Y%m%d-%H:%M" -->Last updated: <!--#flastmod file="SDLx-App-Sample_08.shtml" --></small>
</div> <!-- #content -->
<!--#include virtual="/includes/backtotop.shtml" -->
</div> <!-- #pagewrap -->
</body>
</html>
