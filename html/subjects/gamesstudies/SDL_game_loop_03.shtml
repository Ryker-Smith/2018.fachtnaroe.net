<!DOCTYPE html>
<!--#include virtual="/includes/head.shtml" -->
<body onload="onloadProc()">
<!--#include virtual="/includes/inprogress.shtml" -->
<!--#include virtual="/includes/animation.shtml" -->
<div id="pagewrap">
<!--#include virtual="/includes/sitename.shtml" -->
<div id="topstripe"></div>
<!--#include virtual="/includes/sidemenu.shtml" -->
<div id="content">
<!--#include virtual="/includes/topblurb.shtml" -->
<h1>Basic game/event loop</h1>
<p>You can use this as a basis for further programs which require a game loop which handles input events and displays text.</p>
<pre>#!/usr/bin/perl
use strict;
# Purpose: demonstrate basics of creating a game loop in
#       a graphics program using SDL, plus text box locations.
#       Program creates an App., creates a text rectangle then put mouse
#       locations in that text rectangle in response to mouse clicks;
#       Reports mouse and keyboard events to CLI. 'x' or 'Q' to quit.
# Date:   2013
# Author: Fachtna Roe

use SDL; #needed to get all constants
use SDL::Video;
use SDLx::App;
use SDL::Surface;
use SDL::Rect;
use SDL::Image;
use SDL::Event;
use SDL::Mouse;
# Now use text modules
use SDLx::Text;

my ($gui, $background, $background_rect, $event, $exiting, $text_box);
# First create a new App
$gui = SDLx::App-&gt;new(
    title  =&gt; "Put a Window title here",
    width  =&gt; 800, # use same width as background image
    height =&gt; 600, # use same height as background image
    depth  =&gt; 32,
    exit_on_quit =&gt; 1 # Enable 'X' button
);
# Add event handler for quit (covered also by 'q' of 'x' from keyboard)
$gui-&gt;add_event_handler( \&amp;quit_event );
# Load an image for the background
# If the program is run without an available image the error
#  "Can't call method "w" on an undefined value at ThisFile.pl line XX."
# will be received.
$background = SDL::Image::load('put an image filename here');
# Create a rectangle for the background image
$background_rect = SDL::Rect-&gt;new(0,0,
    $background-&gt;w,
    $background-&gt;h,
);

# Add in a text box/location; we'll put text in it later
$text_box = SDLx::Text-&gt;new(size=&gt;'24', # font can also be specified
                            color=&gt;[255,0,0], # [R,G,B]
                            x =&gt;50,
                            y=&gt; 200);
                            
# Create a new event structure variable
$event = SDL::Event-&gt;new();
# Draw the background
SDL::Video::blit_surface($background, $background_rect, $gui, $background_rect );
# Update the window
SDL::Video::update_rects($gui, $background_rect);

$exiting = 0;
# Start a game loop
while ( !$exiting ) {
  $gui-&gt;update;
  # Update the queue to recent events
  SDL::Events::pump_events();
  # process all available events
  while (SDL::Events::poll_event($event)) {
    # check by Event type      
    if ($event-&gt;type == SDL_QUIT) {
      &amp;quit_event(); 
    }
    elsif ($event-&gt;type == SDL_KEYUP) {
        &amp;key_event($event);
    }
    elsif ($event-&gt;type == SDL_MOUSEBUTTONDOWN) {
      &amp;mouse_event($event);
    }
  }
  SDL::Video::update_rects($gui);
  # slow things down if required
  $gui-&gt;delay(100);
} # game loop

sub quit_event {
	exit;
}

sub key_event {
  # printed output from here is going to the CLI
  print "Key is: ";
  my $key_name = SDL::Events::get_key_name( $event-&gt;key_sym );  
  print "[$key_name]\n";
  if (($key_name eq "q") || ($key_name eq "Q") ) {
    $exiting = 1;
  }
  if (($key_name eq "x") || ($key_name eq "X") ) {
    $exiting = 1;
  }
}

sub mouse_event {
  # printed output from here is going to the CLI
  print "Mouse: ";
  my ($mouse_mask,$mouse_x,$mouse_y)  = @{SDL::Events::get_mouse_state()};
  print "[$mouse_x, $mouse_y]\n";
  # re-blit the  background - try running this program with the next line commented out
  SDL::Video::blit_surface($background, $background_rect, $gui, $background_rect );
  # Put some text in the previously prepared text box
  $text_box-&gt;write_to($gui,"Mouse at: ($mouse_x, $mouse_y)");

}
</pre>
<small><!--#config timefmt="%Y%m%d-%H:%M" -->Last updated: <!--#flastmod file="SDL_game_loop_03.shtml" --></small>
</div> <!-- #content -->
<!--#include virtual="/includes/backtotop.shtml" -->
</div> <!-- #pagewrap -->
</body>
</html>
