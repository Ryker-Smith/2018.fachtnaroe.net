<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using Application Contexts to&nbsp;Retrieve&nbsp;User&nbsp;Information</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 743" />
<meta name="dcterms.created" content="2014-01-15T13:27:4Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Security Guide" />
<meta name="dcterms.identifier" content="B28531-21" />
<meta name="dcterms.isVersionOf" content="DBSEG" />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="app_devs.htm" title="Previous" type="text/html" />
<link rel="Next" href="vpd.htm" title="Next" type="text/html" />
<link rel="alternate" href="../b28531.pdf" title="PDF version" type="application/pdf" />
<link rel="alternate" href="../B28531-21.epub" title="ePub version" type="application/epub+zip" />
<link rel="alternate" href="../B28531-21.mobi" title="Mobipocket version" type="application/x-mobipocket-ebook" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a>
<header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">13/19</span> <!-- End Header -->
<div id="DBSEG011" class="chapter"><a id="CIHHBHEF"></a>
<h1 class="chapter"><span class="secnum">6</span> Using Application Contexts to&nbsp;Retrieve&nbsp;User&nbsp;Information</h1>
<p>This chapter contains:</p>
<ul>
<li>
<p><a href="#CIHBEFDF">About Application Contexts</a></p>
</li>
<li>
<p><a href="#CIHHBCDH">Types of Application Contexts</a></p>
</li>
<li>
<p><a href="#CHDBDJGC">Using Database Session-Based Application Contexts</a></p>
</li>
<li>
<p><a href="#CIHFJHCG">Using Global Application Contexts</a></p>
</li>
<li>
<p><a href="#CHDIFCFF">Using Client Session-Based Application Contexts</a></p>
</li>
<li>
<p><a href="#CIHHGDIF">Finding Information About Application Contexts</a></p>
</li>
</ul>
<a id="CIHBEFDF"></a>
<div id="DBSEG70071" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">About Application Contexts</h2>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BCEDHFFI">What Is an Application Context?</a></p>
</li>
<li>
<p><a href="#BCEBBDFF">Components of the Application Context</a></p>
</li>
<li>
<p><a href="#BCEBFDEA">Where Are the Application Context Values Stored?</a></p>
</li>
<li>
<p><a href="#BCEBJCAD">Benefits of Using Application Contexts</a></p>
</li>
</ul>
<a id="BCEDHFFI"></a>
<div id="DBSEG98147" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">What Is an Application Context?</h3>
<p><a id="sthref1152"></a>An application context is a set of <span class="bold">name-value</span> pairs that Oracle Database stores in memory. The application context has a label called a <span class="bold">namespace</span>, for example, <code>empno_ctx</code> for an application context that retrieves employee IDs. Inside the context are the name-value pairs (an associative array): the <span class="bold">name</span> points to a location in memory that holds the <span class="bold">value</span>. An application can use the application context to access session information about a user, such as the user ID or other user-specific information, or a client ID, and then securely pass this data to the database. You can then use this information to either permit or prevent the user from accessing data through the application. You can use application contexts to authenticate both database and nondatabase users.</p>
</div>
<!-- class="sect2" -->
<a id="BCEBBDFF"></a>
<div id="DBSEG98148" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Components of the Application Context</h3>
<p>The <a id="sthref1153"></a>components of the name-value pair are as follows:</p>
<ul>
<li>
<p><span class="bold">Name:</span> Refers to the name of the attribute set that is associated with the value. For example, if the <code>empno_ctx</code> application context retrieves an employee ID from the <code>HR.EMPLOYEES</code> table, it could have a name such as <code>employee_id</code>.</p>
</li>
<li>
<p><span class="bold">Value:</span> Refers to a value set by the attribute. For example, for the <code>empno_ctx</code> application context, if you wanted to retrieve an employee ID from the <code>HR.EMPLOYEES</code> table, you could create a value called <code>emp_id</code> that sets the value for this ID.</p>
</li>
</ul>
<p>Think of an application context as a global variable that holds information that is accessed during a database session. To set the values for a secure application context, you must create a PL/SQL package procedure that uses the <code>DBMS_SESSION.SET_CONTEXT</code> procedure. In fact, this is the only way that you can set application context values if the context is not marked <code>INITIALIZED EXTERNALLY</code> or <code>INITIALIZED GLOBALLY</code>. You can assign the values to the application context attributes at run time, not when you create the application context. Because the <a id="sthref1154"></a><a id="sthref1155"></a><span class="bold">trusted</span> procedure, and not the user, assigns the values, it is a called secure application context. For client-session based application contexts, another way to set the application context is to use Oracle Call Interface (OCI) calls.</p>
</div>
<!-- class="sect2" -->
<a id="BCEBFDEA"></a>
<div id="DBSEG98149" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Where Are the Application Context Values Stored?</h3>
<p>Oracle <a id="sthref1156"></a>Database <a id="sthref1157"></a>stores the application context values in a secure data cache available in the <a id="sthref1158"></a>User Global Area (UGA) or the <a id="sthref1159"></a>System (sometimes called "Shared") Global Area (SGA). This way, the application context values are retrieved during the session. Because the application context stores the values in this data cache, it increases performance for your applications. You can use an application context by itself, with Oracle Virtual Private Databases policies, or with other fine-grained access control policies. See <a href="vpd.htm#CIHDEEBI">"Using Oracle Virtual Private Database with an Application Context"</a> if you are interested in using application contexts with Virtual Private Database policies.</p>
</div>
<!-- class="sect2" -->
<a id="BCEBJCAD"></a>
<div id="DBSEG98150" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Benefits of Using Application Contexts</h3>
<p>Most <a id="sthref1160"></a>applications contain the kind of information that can be used for application contexts. For example, in an order entry application that uses a table containing the columns <code>ORDER_NUMBER</code> and <code>CUSTOMER_NUMBER</code>, you can use the values in these columns as security attributes to restrict access by a customer to his or her own orders, based on the ID of that customer.</p>
<p>Application contexts are useful for the following purposes:</p>
<ul>
<li>
<p>Enforcing fine-grained access control, for example, in Oracle Virtual Private Database polices</p>
</li>
<li>
<p>Preserving user identity across multitier environments</p>
</li>
<li>
<p>Enforcing stronger security for your applications, because the application context is controlled by a trusted procedure, not the user</p>
</li>
<li>
<p><a id="sthref1161"></a>Increasing performance by serving as a secure data cache for attributes needed by an application for fine-grained auditing or for use in PL/SQL conditional statements or loops</p>
<p>This cache saves the repeated overhead of querying the database each time these attributes are needed. Because the application context stores session data in cache rather than forcing your applications to retrieve this data repeatedly from a table, it greatly improves the performance of your applications.</p>
</li>
<li>
<p>Serving as a holding area for name-value pairs that an application can define, modify, and access</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHHBCDH"></a>
<div id="DBSEG98151" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Types of Application Contexts</h2>
<p><a id="sthref1162"></a>There are three general categories of application contexts:</p>
<ul>
<li>
<p><span class="bold">Database session-based application contexts.</span> This type retrieves data that is stored in the database user session (that is, the UGA) cache. There are three categories of database session-based application contexts:</p>
<ul>
<li>
<p><span class="bold">Initialized locally.</span> Initializes the application context locally, to the session of the user.</p>
</li>
<li>
<p><span class="bold">Initialized externally.</span> Initializes the application context from an Oracle Call Interface (OCI) application, a job queue process, or a connected user database link.</p>
</li>
<li>
<p><span class="bold">Initialized globally.</span> Uses attributes and values from a centralized location, such as an LDAP directory.</p>
</li>
</ul>
<p><a href="#CHDBDJGC">"Using Database Session-Based Application Contexts"</a> describes this type of application context.</p>
</li>
<li>
<p><span class="bold">Global application contexts.</span> This type retrieves data that is stored in the System Global Area (SGA) so that it can be used for applications that use a sessionless model, such as middle-tier applications in a three-tiered architecture. A global application context is useful if the session context must be shared across sessions, for example, through connection pool implementations.</p>
<p><a href="#CIHFJHCG">"Using Global Application Contexts"</a> describes this type.</p>
</li>
<li>
<p><span class="bold">Client session-based application contexts.</span> This type uses Oracle Call Interface functions on the client side to set the user session data, and then to perform the necessary security checks to restrict user access.</p>
<p><a href="#CHDIFCFF">"Using Client Session-Based Application Contexts"</a> describes this type.</p>
</li>
</ul>
<p><a href="#g1015746">Table 6-1</a> summarizes the different types of application contexts.</p>
<div id="DBSEG98152" class="tblhruleformalwidemax">
<p class="titleintable"><a id="sthref1163"></a><a id="g1015746"></a>Table 6-1 Types of Application Contexts</p>
<table class="cellalignment1576" title="Types of Application Contexts" summary="This table lists whether the different types of application context are stored in the UGA or SGA, whether they support connected user database links, whether they support centralized storage in an LDAP directory, and whether they suppport sessionless multitier applications." dir="ltr">
<thead>
<tr class="cellalignment1570">
<th class="cellalignment1577" id="r1c1-t2">Application Context Type</th>
<th class="cellalignment1577" id="r1c2-t2">Stored in UGA</th>
<th class="cellalignment1577" id="r1c3-t2">Stored in SGA</th>
<th class="cellalignment1577" id="r1c4-t2">Supports Connected User Database Links</th>
<th class="cellalignment1577" id="r1c5-t2">Supports Centralized Storage of Users' Application Context</th>
<th class="cellalignment1577" id="r1c6-t2">Supports Sessionless Multitier Applications</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1570">
<td class="cellalignment1578" id="r2c1-t2" headers="r1c1-t2">
<p>Database session-based application context initialized locally</p>
</td>
<td class="cellalignment1578" headers="r2c1-t2 r1c2-t2">
<p>Yes</p>
</td>
<td class="cellalignment1578" headers="r2c1-t2 r1c3-t2">
<p>No</p>
</td>
<td class="cellalignment1578" headers="r2c1-t2 r1c4-t2">
<p>No</p>
</td>
<td class="cellalignment1578" headers="r2c1-t2 r1c5-t2">
<p>No</p>
</td>
<td class="cellalignment1578" headers="r2c1-t2 r1c6-t2">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1570">
<td class="cellalignment1578" id="r3c1-t2" headers="r1c1-t2">
<p>Database session-based application context initialized externally</p>
</td>
<td class="cellalignment1578" headers="r3c1-t2 r1c2-t2">
<p>Yes</p>
</td>
<td class="cellalignment1578" headers="r3c1-t2 r1c3-t2">
<p>No</p>
</td>
<td class="cellalignment1578" headers="r3c1-t2 r1c4-t2">
<p>Yes</p>
</td>
<td class="cellalignment1578" headers="r3c1-t2 r1c5-t2">
<p>No</p>
</td>
<td class="cellalignment1578" headers="r3c1-t2 r1c6-t2">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1570">
<td class="cellalignment1578" id="r4c1-t2" headers="r1c1-t2">
<p>Database session-based application context initialized globally</p>
</td>
<td class="cellalignment1578" headers="r4c1-t2 r1c2-t2">
<p>Yes</p>
</td>
<td class="cellalignment1578" headers="r4c1-t2 r1c3-t2">
<p>No</p>
</td>
<td class="cellalignment1578" headers="r4c1-t2 r1c4-t2">
<p>No</p>
</td>
<td class="cellalignment1578" headers="r4c1-t2 r1c5-t2">
<p>Yes</p>
</td>
<td class="cellalignment1578" headers="r4c1-t2 r1c6-t2">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1570">
<td class="cellalignment1578" id="r5c1-t2" headers="r1c1-t2">
<p>Global application context</p>
</td>
<td class="cellalignment1578" headers="r5c1-t2 r1c2-t2">
<p>No</p>
</td>
<td class="cellalignment1578" headers="r5c1-t2 r1c3-t2">
<p>Yes</p>
</td>
<td class="cellalignment1578" headers="r5c1-t2 r1c4-t2">
<p>No</p>
</td>
<td class="cellalignment1578" headers="r5c1-t2 r1c5-t2">
<p>No</p>
</td>
<td class="cellalignment1578" headers="r5c1-t2 r1c6-t2">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1570">
<td class="cellalignment1578" id="r6c1-t2" headers="r1c1-t2">
<p>Client session-based application context</p>
</td>
<td class="cellalignment1578" headers="r6c1-t2 r1c2-t2">
<p>Yes</p>
</td>
<td class="cellalignment1578" headers="r6c1-t2 r1c3-t2">
<p>No</p>
</td>
<td class="cellalignment1578" headers="r6c1-t2 r1c4-t2">
<p>Yes</p>
</td>
<td class="cellalignment1578" headers="r6c1-t2 r1c5-t2">
<p>No</p>
</td>
<td class="cellalignment1578" headers="r6c1-t2 r1c6-t2">
<p>Yes</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwidemax" --></div>
<!-- class="sect1" -->
<a id="CHDBDJGC"></a>
<div id="DBSEG98153" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using Database Session-Based Application Contexts</h2>
<p><a id="sthref1164"></a>This section contains:</p>
<ul>
<li>
<p><a href="#CIHFAACE">About Database Session-Based Application Contexts</a></p>
</li>
<li>
<p><a href="#i1006260">Creating a Database Session-Based Application Context</a></p>
</li>
<li>
<p><a href="#i1006133">Creating a PL/SQL Package to Set the Database Session-Based Application Context</a></p>
</li>
<li>
<p><a href="#i1006274">Creating a Logon Trigger to Run a Database Session Application Context Package</a></p>
</li>
<li>
<p><a href="#CIHDAJDF">Tutorial: Creating and Using a Database Session-Based Application Context</a></p>
</li>
<li>
<p><a href="#i1008738">Initializing Database Session-Based Application Contexts Externally</a></p>
</li>
<li>
<p><a href="#CHDFECDG">Initializing Database Session-Based Application Contexts Globally</a></p>
</li>
<li>
<p><a href="#i1006405">Using Externalized Database Session-Based Application Contexts</a></p>
</li>
</ul>
<a id="CIHFAACE"></a>
<div id="DBSEG98154" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Database Session-Based Application Contexts</h3>
<p><a id="sthref1165"></a>If you must retrieve session information for database users, use a database session-based application context. This type of application context uses a PL/SQL procedure within Oracle Database to retrieve, set, and secure the data it manages.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If your users are application users, that is, users who are not in your database, consider using a global application context instead. See <a href="#CIHFJHCG">"Using Global Application Contexts"</a> for more information.</div>
<p>The database session-based application context is managed entirely within Oracle Database. Oracle Database sets the values, and then when the user exits the session, automatically clears the application context values stored in cache. <a id="sthref1166"></a>If the user connection ends abnormally, for example, during a power failure, then the <a id="sthref1167"></a>PMON background process cleans up the application context data.You do not need to explicitly clear the application context from cache.</p>
<p>The advantage of having Oracle Database manage the application context is that you can centralize the application context management. Any application that accesses this database will need to use this application context to permit or prevent user access to that application. This provides benefits both in improved performance and stronger security.</p>
<p><a id="sthref1168"></a>You use the following components to create and use a database session-based application context:</p>
<ul>
<li>
<p><span class="bold">The application context.</span> You use the <code>CREATE CONTEXT</code> SQL statement to create an application context. This statement names the application context (namespace) and associates it with a PL/SQL procedure that is designed to retrieve session data and set the application context.</p>
</li>
<li>
<p><span class="bold">A PL/SQL procedure to perform the data retrieval and set the context.</span> <a href="#CIHHACHA">"About the Package That Manages the Database Session-Based Application Context"</a> describes the tasks this procedure must perform. Ideally, create this procedure within a package, so that you can include other procedures if you want, for example, to perform error checking tasks.</p>
</li>
<li>
<p><span class="bold">A way to set the application context when the user logs on.</span> Users who log on to applications that use the application context must run a PL/SQL package that sets the application context. You can achieve this with either a logon trigger that fires each time the user logs on, or you can embed this functionality in your applications.</p>
</li>
</ul>
<p><a href="#CIHDAJDF">"Tutorial: Creating and Using a Database Session-Based Application Context"</a> shows how to create and use a database session-based application context that is initialized locally.</p>
<p>You can also initialize session-based application contexts either externally or globally. Either method stores the context information in the user session.</p>
<ul>
<li>
<p><span class="bold">External initialization.</span> This type can come from an OCI interface, a job queue process, or a connected user database link. See <a href="#i1008738">"Initializing Database Session-Based Application Contexts Externally"</a> for detailed information.</p>
</li>
<li>
<p><span class="bold">Global initialization.</span> This type uses attributes and values from a centralized location, such as an LDAP directory. <a href="#CHDFECDG">"Initializing Database Session-Based Application Contexts Globally"</a> provides more information.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1006260"></a>
<div id="DBSEG98155" class="sect2">
<h3 class="sect2">Creating a Database Session-Based Application Context</h3>
<p>To create a database session-based application context, you use the <code><a id="sthref1169"></a><a id="sthref1170"></a>CREATE</code> <code>CONTEXT</code> SQL statement. Here, you create a namespace for the application context and then associate it with a PL/SQL package that manages the name-value pair that holds the session information of the user. You must have the <code>CREATE ANY CONTEXT</code> system privilege to run this statement, and the <code>DROP ANY CONTEXT</code> privilege to use the <code>DROP CONTEXT</code> statement if you drop the application context. In a database session-based application context, data is stored in the database user session (UGA) in a namespace that you create with the <code>CREATE CONTEXT</code> SQL statement.</p>
<p><a id="sthref1171"></a>Each application context must have a unique attribute and belong to a namespace. That is, context names must be unique within the database, not just within a schema.</p>
<p><a id="sthref1172"></a>The ownership of the application context is as follows: Even though a user who has been granted the <code>CREATE ANY CONTEXT</code> and <code>DROP ANY CONTEXT</code> privileges can create and drop the application context, it is owned by the <code>SYS</code> schema. Oracle Database associates the context with the schema account that created it, but if you drop this user, the context still exists in the <code>SYS</code> schema. As user <code>SYS</code>, you can drop the application context.</p>
<p><a href="#CIHIDBDD">Example 6-1</a> shows how to use <code>CREATE CONTEXT</code> to create a database session-based application context:</p>
<div id="DBSEG98156" class="example">
<p class="titleinexample"><a id="CIHIDBDD"></a>Example 6-1 Creating a Database Session-Based Application Context</p>
<pre>
CREATE CONTEXT empno_ctx USING set_empno_ctx_pkg;
</pre></div>
<!-- class="example" -->
<p>Here, <code>empno_ctx</code> is the context namespace and <code>set_empno_ctx_pkg</code> is the package that sets attributes for the <code>empno_ctx</code> namespace. When you create the application context, the PL/SQL package does not need to exist, but it must exist at run time. <a href="#CIHBCIHG">"Step 3: Create a Package to Retrieve Session Data and Set the Application Context"</a> shows an example of how to create a package that can be used with this application context.</p>
<p>Notice that when you create the context, you do not set its name-value attributes in the <code>CREATE CONTEXT</code> statement. Instead, you set these in the package that you associate with the application context. The reason you do this is to prevent a malicious user<a id="sthref1173"></a> from changing the context attributes without proper attribute validation.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot create a context called <code>CLIENTCONTEXT</code>. This word is reserved for use with client session-based application contexts. See <a href="#CHDIFCFF">"Using Client Session-Based Application Contexts"</a> for more information about this type of application context.</div>
<p>For each application, you can create an application context that has its own attributes<a id="sthref1174"></a>. Suppose, for example, you have three applications: General Ledger, Order Entry, and Human Resources. You can specify different attributes for each application:</p>
<ul>
<li>
<p>For the order entry application context, you can specify the attribute <code>CUSTOMER_NUMBER.</code></p>
</li>
<li>
<p>For the general ledger application context, you can specify the attributes <code>SET_OF_BOOKS</code> and <code>TITLE.</code></p>
</li>
<li>
<p>For the human resources application context, you can specify the attributes <code>ORGANIZATION_ID</code>, <code>POSITION</code>, and <code>COUNTRY</code>.</p>
</li>
</ul>
<p>The data the attributes access is stored in the tables behind the applications. For example, the order entry application uses a table called <code>OE.CUSTOMERS</code>, which contains the <code>CUSTOMER_NUMBER</code> column, which provides data for the <code>CUSTOMER_NUMBER</code> attribute. In each case, you can adapt the application context to your precise security needs.</p>
</div>
<!-- class="sect2" -->
<a id="i1006133"></a>
<div id="DBSEG98157" class="sect2">
<h3 class="sect2">Creating a PL/SQL Package to Set the Database Session-Based Application Context</h3>
<p><a id="sthref1175"></a>This section contains:</p>
<ul>
<li>
<p><a href="#CIHHACHA">About the Package That Manages the Database Session-Based Application Context</a></p>
</li>
<li>
<p><a href="#CIHHECCH">Using SYS_CONTEXT to Retrieve Session Information</a></p>
</li>
<li>
<p><a href="#i1006204">Using Dynamic SQL with SYS_CONTEXT</a></p>
</li>
<li>
<p><a href="#i1006232">Using SYS_CONTEXT in a Parallel Query</a></p>
</li>
<li>
<p><a href="#CIHIECIJ">Using SYS_CONTEXT with Database Links</a></p>
</li>
<li>
<p><a href="#CIHEFECH">Using DBMS_SESSION.SET_CONTEXT to Set Session Information</a></p>
</li>
</ul>
<a id="CIHHACHA"></a>
<div id="DBSEG98158" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About the Package That Manages the Database Session-Based Application Context</h4>
<p>The <a id="sthref1176"></a>PL/SQL package, usually created in the schema of the security administrator, defines procedures that manage the session data represented by the application context. It must perform the following tasks:</p>
<ul>
<li>
<p><span class="bold">Retrieve session information.</span> To retrieve the user session information, you can use the <code>SYS_CONTEXT</code> SQL function. <a id="sthref1177"></a>The <code>SYS_CONTEXT</code> function returns the value of the parameter associated with the context namespace. You can use this function in both SQL and PL/SQL statements. Typically, you will use the built-in <code>USERENV</code> namespace to retrieve the session information of a user. (For detailed information about the <code>SYS_CONTEXT</code> function, see <a class="olink SQLRF06117" href="../../server.111/b28286/functions172.htm#SQLRF06117"><span class="italic">Oracle Database SQL Language Reference</span></a>.)</p>
</li>
<li>
<p><span class="bold">Set the name-value attributes of the application context you created with CREATE CONTEXT.</span> You can use the <code><a id="sthref1178"></a>DBMS_SESSION.SET_CONTEXT</code> procedure to set the name-value attributes of the application context. The name-value attributes can hold information such as the user ID, IP address, authentication mode, the name of the application, and so on. The values of the attributes you set remain either until you reset them, or until the user ends the session. Note the following:</p>
<ul>
<li>
<p>If the value of the parameter in the namespace already has been set, then <code>SET_CONTEXT</code> overwrites this value.</p>
</li>
<li>
<p>Be aware that any changes in the context value are reflected immediately and subsequent calls to access the value through the <code>SYS_CONTEXT</code> function will return the most recent value.</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">Be executed by users.</span> After you create the package, the user will need to execute the package when he or she logs on. You can create a logon trigger to execute the package automatically when the user logs on, or you can embed this functionality in your applications. Remember that the application context session values are cleared automatically when the user ends the session, so you do not need to manually remove the session data.</p>
</li>
</ul>
<p>It is important to remember that the procedure is a trusted procedure: It is designed to prevent the user from setting his or her own application context attribute values. The user runs the procedure, but the procedure sets the application context values, not the user.</p>
<p><a href="#CIHDAJDF">"Tutorial: Creating and Using a Database Session-Based Application Context"</a> shows how to create a database session-based application context.</p>
</div>
<!-- class="sect3" -->
<a id="CIHHECCH"></a>
<div id="DBSEG98159" class="sect3">
<h4 class="sect3"><a id="sthref1179"></a>Using SYS_CONTEXT to Retrieve Session Information</h4>
<p><a id="sthref1180"></a><a id="sthref1181"></a>The <a id="sthref1182"></a>syntax for the PL/SQL function <code>SYS_CONTEXT</code> is as follows:</p>
<pre>
SYS_CONTEXT ('<span class="italic">namespace</span>','<span class="italic">parameter</span>'[,<span class="italic">length</span>])
</pre>
<p>In this specification:</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">namespace</span></code>: The name of the application context. You can specify either a string or an expression that evaluates to a string. The <code>SYS_CONTEXT</code> function returns the value of parameter associated with the context namespace at the current instant. If the value of the parameter in the namespace already has been set, then <code>SET_CONTEXT</code> overwrites this value.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">parameter</span></code>: A parameter within the <code><span class="codeinlineitalic">namespace</span></code> application context.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">length</span></code>: Optional. The default maximum size of the return type is 256 bytes, but you can override the length by specifying a value up to 4000 bytes. Enter a value that is a <code>NUMBER</code> data type, or a value that can be can be implicitly converted to <code>NUMBER</code>. The data type of the <code>SYS_CONTEXT</code> return type is a <code>VARCHAR2</code>.</p>
</li>
</ul>
<p>The <code>SYS_CONTEXT</code> function provides a default namespace, <code><a id="sthref1183"></a>USERENV</code>, which describes the current session of the user logged on. You can use <code>SYS_CONTEXT</code> to retrieve different types of session-based information about a user, such as the user host computer ID, IP address, operating system user name, and so on. Remember that you only use <code>USERENV</code> to <span class="italic">retrieve</span> session data, not <span class="italic">set</span> it. The predefined attributes are listed in the description for the <code>SYS_CONTEXT</code> PL/SQL function in the <a class="olink SQLRF06117" href="../../server.111/b28286/functions172.htm#SQLRF06117"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>For example, to retrieve the name of the host computer to which a client is connected, you can use the <code>HOST</code> parameter of <code>USERENV</code> as follows:</p>
<pre>
SYS_CONTEXT ('userenv','host')
</pre>
<p>You can check the <code>SYS_CONTEXT</code> settings by issuing a <code>SELECT</code> SQL statement on the <code><a id="sthref1184"></a>DUAL</code> table. The <code>DUAL</code> table is a small table in the data dictionary that Oracle Database and user-written programs can reference to guarantee a known result. This table has one column called <code>DUMMY</code> and one row that contains the value <code>X</code>.</p>
<p><a href="#CIHCBAEF">Example 6-2</a> demonstrates how to find the host computer on which you are logged, assuming that you are logged on to the <code>SHOBEEN_PC</code> host computer under <code>EMP_USERS</code>.</p>
<div id="DBSEG98160" class="example">
<p class="titleinexample"><a id="CIHCBAEF"></a>Example 6-2 Finding SYS_CONTEXT Values</p>
<pre>
SELECT SYS_CONTEXT ('USERENV', 'HOST') FROM DUAL;

SYS_CONTEXT(USERENV,HOST)
-------------------------
EMP_USERS\SHOBEEEN_PC
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
The <code>USERENV</code> application context namespace replaces the <code><a id="sthref1185"></a>USERENV</code> function provided in earlier Oracle Database releases.</div>
</div>
<!-- class="sect3" -->
<a id="i1006204"></a>
<div id="DBSEG98161" class="sect3">
<h4 class="sect3">Using Dynamic SQL with SYS_CONTEXT<a id="sthref1186"></a><a id="sthref1187"></a></h4>
<p>During<a id="sthref1188"></a> a session in which you expect a change in policy between executions of a given query, the query must use dynamic SQL. You must use dynamic SQL because static SQL and dynamic SQL parse statements differently:</p>
<ul>
<li>
<p>Static SQL statements are parsed at compile time. They are not parsed again at execution time for performance reasons.</p>
</li>
<li>
<p>Dynamic SQL statements are parsed every time they are executed.</p>
</li>
</ul>
<p>Consider a situation in which Policy A is in force when you compile a SQL statement, and then you switch to Policy B and run the statement. With static SQL, Policy A remains in force. Oracle Database parses the statement at compile time, but does not parse it again upon execution. With dynamic SQL, Oracle Database parses the statement upon execution, then the switch to Policy B takes effect.</p>
<p>For example, consider the following policy:</p>
<pre>
EMPLOYEE_NAME = SYS_CONTEXT ('USERENV', 'SESSION_USER')
</pre>
<p>The policy <code>EMPLOYEE_NAME</code> matches the database user name. It is represented in the form of a SQL predicate in Oracle Virtual Private Database: the predicate is considered a policy. If the predicate changes, then the statement must be parsed again to produce the correct result.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="vpd.htm#CIHDGHFI">"Using Automatic Reparsing for Fine-Grained Access Control Policy Functions"</a></div>
</div>
<!-- class="sect3" -->
<a id="i1006232"></a>
<div id="DBSEG14002" class="sect3">
<h4 class="sect3">Using <a id="sthref1189"></a><a id="sthref1190"></a>SYS_CONTEXT in a Parallel Query</h4>
<p>If you use <code>SYS_CONTEXT</code> inside a SQL function that is embedded in a parallel query, then the function includes the <a id="sthref1191"></a>application context.</p>
<p>Consider a user-defined function within a SQL statement, which sets the user ID to 5:</p>
<pre>
CREATE FUNCTION set_id 
 RETURN NUMBER IS
BEGIN
 IF SYS_CONTEXT ('hr', 'id') = 5
   THEN RETURN 1; ELSE RETURN 2;
 END IF;
END;
</pre>
<p>Now consider the following statement:</p>
<pre>
SELECT * FROM emp WHERE set_id( ) = 1;
</pre>
<p>When this statement is run as a parallel query, the user session, which contains the application context information, is propagated to the<a id="sthref1192"></a> parallel execution servers (query child processes).</p>
</div>
<!-- class="sect3" -->
<a id="CIHIECIJ"></a>
<div id="DBSEG98162" class="sect3">
<h4 class="sect3"><a id="sthref1193"></a><a id="sthref1194"></a>Using SYS_CONTEXT with Database Links</h4>
<p><a id="sthref1195"></a><a id="sthref1196"></a>When SQL statements within a user session involve database links, then Oracle Database runs the <code>SYS_CONTEXT</code> SQL function at the host computer of the database link, and then captures the context information there (at the host computer).</p>
<p>If remote PL/SQL procedure calls are run on a database link, then Oracle Database runs any <code>SYS_CONTEXT</code> function inside such a procedure at the destination database of the link. In this case, only externally initialized application contexts are available at the database link destination site. For security reasons, Oracle Database propagates only the externally initialized application context information to the destination site from the initiating database link site.</p>
</div>
<!-- class="sect3" -->
<a id="CIHEFECH"></a>
<div id="DBSEG98163" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Using DBMS_SESSION.SET_CONTEXT to Set Session Information<a id="sthref1197"></a></h4>
<p><a id="sthref1198"></a><a id="sthref1199"></a>After you have used the <code>SYS_CONTEXT</code> function to retrieve the session data of a user, you are ready to set <a id="sthref1200"></a>the application context values <a id="sthref1201"></a><a id="sthref1202"></a>from the session of this user. To do so, use the <code>DBMS_SESSION.SET_CONTEXT</code> procedure. (Ensure that you have the <code>EXECUTE</code> privilege for the <code>DBMS_SESSION</code> PL/SQL package.)</p>
<p>Its syntax is as follows:</p>
<pre>
DBMS_SESSION.SET_CONTEXT (
   namespace VARCHAR2,
   attribute VARCHAR2,
   value     VARCHAR2,
   username  VARCHAR2,
   client_id VARCHAR2);
</pre>
<p>In this specification:</p>
<ul>
<li>
<p><code>namespace</code>: The namespace of the application context to be set, limited to 30 bytes. For example, if you were using a namespace called <code>custno_ctx</code>, you would specify it as follows:</p>
<pre>
namespace =&gt; 'custno_ctx',
</pre></li>
<li>
<p><code>attribute</code>: The attribute of the application context to be set, limited to 30 bytes. For example, to create the <code>ctx_attrib</code> attribute for the <code>custno_ctx</code> namespace:</p>
<pre>
attribute =&gt; 'ctx_attrib',
</pre></li>
<li>
<p><code>value</code>: The value of the application context to be set, limited to 4000 bytes. Typically, this is the value retrieved by the <code>SYS_CONTEXT</code> function and stored in a variable. For example:</p>
<pre>
value =&gt; ctx_value,
</pre></li>
<li>
<p><code>username</code>: Optional. The database user name attribute of the application context. The default is <code>NULL</code>, which permits any user to access the session. For database session-based application contexts, omit this setting so that it uses the <code>NULL</code> default.</p>
<p>The <code>username</code> and <code>client_id</code> parameters are used for globally accessed application contexts. See <a href="#CIHDFGAC">"Setting the DBMS_SESSION.SET_CONTEXT username and client_id Parameters"</a> for more information.</p>
</li>
<li>
<p><code>client_id</code>: Optional. The application-specific <code>client_id</code> attribute of the application context (64-byte maximum). The default is <code>NULL</code>, which means that no client ID is specified. For database session-based application contexts, omit this setting so that it uses the <code>NULL</code> default.</p>
</li>
</ul>
<p>See <a class="olink ARPLS054" href="../../appdev.111/b28419/d_sessio.htm#ARPLS054"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about the <code>DBMS_SESSION</code> package.</p>
<p><a id="sthref1203"></a>For example, remember the application context created in <a href="#CIHIDBDD">Example 6-1</a>:</p>
<pre>
CREATE CONTEXT empno_ctx USING set_empno_ctx_proc;
</pre>
<p><a href="#CIHCABHB">Example 6-3</a> shows how to create a simple procedure that creates an attribute for the <code>empno_ctx</code> application context.</p>
<div id="DBSEG98164" class="example">
<p class="titleinexample"><a id="CIHCABHB"></a>Example 6-3 Simple Procedure to Create an Application Context Value</p>
<div class="inftblsimple">
<table class="cellalignment1579" title="set_empno_ctx_proc example" summary="set_empno_ctx_proc example, line numbers and code, listed left to right" dir="ltr">
<tbody>
<tr class="cellalignment1570">
<td class="cellalignment1578">
<pre>
1
2
3
4
5
6
7
</pre></td>
<td class="cellalignment1578">
<pre>
CREATE OR REPLACE PROCEDURE set_empno_ctx_proc(
  emp_value IN VARCHAR2)
 IS   
 BEGIN
  DBMS_SESSION.SET_CONTEXT('empno_ctx', 'empno_attrib', emp_value);
 END; 
/
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblsimple" --></div>
<!-- class="example" -->
<p>In this example:</p>
<ul>
<li>
<p><span class="bold">Line 2:</span> Takes <code>emp_value</code> as the input parameter. This parameter specifies the value associated with the application context attribute <code>empno_attrib</code>. Its limit is 4000 bytes.</p>
</li>
<li>
<p><span class="bold">Line 5:</span> Sets the value of the application context by using the <code>DBMS_SESSION.SET_CONTEXT</code> procedure:</p>
<ul>
<li>
<p><code>'empno_ctx'</code>: Refers to the application context namespace. Enclose its name in single quotation marks.</p>
</li>
<li>
<p><code>'empno_attrib'</code>: Creates the attribute associated with the application context namespace.</p>
</li>
<li>
<p><code>emp_value</code>: Specifies the value for the <code>empno_attrib</code> attribute. Here, it refers to the <code>emp_value</code> parameter defined in <span class="bold">Line 2</span>.</p>
</li>
</ul>
</li>
</ul>
<p>At this stage, you can run the <code>set_empno_ctx_proc</code> procedure to set the application context:</p>
<pre>
EXECUTE set_empno_ctx_proc ('42783');
</pre>
<p>(In a real world scenario, you would set the application context values in the procedure itself, so that it becomes a trusted procedure. This example is only used to show how data can be set for demonstration purposes.)</p>
<p>To check the application context setting, run the following <code>SELECT</code> statement:</p>
<pre>
SELECT SYS_CONTEXT ('empno_ctx', 'empno_attrib') empno_attrib FROM DUAL;

EMPNO_ATTRIB
--------------
42783
</pre>
<p>You can also query the <code>SESSION_CONTEXT</code> data dictionary view to find all the application context settings in the current session of the database instance. For example:</p>
<pre>
SELECT * FROM SESSION_CONTEXT;

NAMESPACE                ATTRIBUTE          VALUE
--------------------------------------------------
EMPNO_CTX                EMP_ID             42783
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CIHDAJDF">"Tutorial: Creating and Using a Database Session-Based Application Context"</a> for how to create package that retrieves the user session information and then sets the application context based on this information</p>
</li>
<li>
<p><a class="olink ARPLS054" href="../../appdev.111/b28419/d_sessio.htm#ARPLS054"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about the <code>DBMS_SESSION.SET_CONTEXT</code> procedure</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006274"></a>
<div id="DBSEG60634" class="sect2">
<h3 class="sect2">Creating a Logon Trigger to Run a Database Session Application Context Package</h3>
<p><a id="sthref1204"></a>After you <a id="sthref1205"></a><a id="sthref1206"></a>create the application context and its associated package, the user must run the package procedure when he or she logs on. You can create a logon trigger that handles this automatically. You do not need to grant the user <code>EXECUTE</code> permissions to run the package.</p>
<p><a href="#CIHBAGDG">Example 6-4</a> shows a simple logon trigger that executes a PL/SQL procedure.</p>
<div id="DBSEG98165" class="example">
<p class="titleinexample"><a id="CIHBAGDG"></a>Example 6-4 Creating a Simple Logon Trigger</p>
<pre>
CREATE OR REPLACE TRIGGER set_empno_ctx_trig AFTER LOGON ON DATABASE
 BEGIN
  sec_mgr.set_empno_ctx_proc;
 END;
</pre></div>
<!-- class="example" -->
<p><a href="#CIHEEHID">Example 6-5</a> shows <a id="sthref1207"></a><a id="sthref1208"></a>how <a id="sthref1209"></a>to create a logon trigger that uses a <code>WHEN OTHERS</code> exception. Otherwise, if there is an error in the PL/SQL logic that creates an unhandled exception, then all connections to the database are blocked. This example shows a <code>WHEN OTHERS</code> exception that writes errors to a table in the security administrator's schema. In a production environment, this is safer than sending the output to the user session, where it could be <a id="sthref1210"></a>vulnerable to security attacks.</p>
<div id="DBSEG98166" class="example">
<p class="titleinexample"><a id="CIHEEHID"></a>Example 6-5 Creating a Logon Trigger for a Production Environment</p>
<pre>
CREATE OR REPLACE TRIGGER set_empno_ctx_trig AFTER LOGON ON DATABASE
 BEGIN
  sec_mgr.set_empno_ctx_proc;
 EXCEPTION
  WHEN OTHERS THEN
        v_code := SQLCODE;
        v_errm := SUBSTR(SQLERRM, 1 , 64);
       -- Invoke another procedure,
       -- declared with PRAGMA AUTONOMOUS_TRANSACTION,
       -- to insert information about errors.
  INSERT INTO sec_mgr.errors VALUES (v_code, v_errm, SYSTIMESTAMP);
 END;
/
</pre></div>
<!-- class="example" -->
<p><a href="#CIHHDGJE">Example 6-6</a> shows<a id="sthref1211"></a> how to create the same logon trigger for a development environment, in which you may want to output errors the user session for debugging purposes.</p>
<div id="DBSEG98167" class="example">
<p class="titleinexample"><a id="CIHHDGJE"></a>Example 6-6 Creating a Logon Trigger for a Development Environment</p>
<pre>
CREATE TRIGGER set_empno_ctx_trig 
 AFTER LOGON ON DATABASE
 BEGIN
  sysadmin_ctx.set_empno_ctx_pkg.set_empno;
 EXCEPTION
  WHEN OTHERS THEN
   RAISE_APPLICATION_ERROR(
    -20000, 'Trigger sysadmin_ctx.set_empno_ctx_trig violation. Login denied.');
 END;
/
</pre></div>
<!-- class="example" -->
<p>Note the following:</p>
<ul>
<li>
<p><span class="bold">If the PL/SQL package procedure called by the logon trigger has any unhandled exceptions or raises any exceptions (because, for example, a security check failed), then the logon trigger fails.</span> When the logon trigger fails, the logon fails, that is, the user is denied permission to log in to the database.</p>
</li>
<li>
<p><span class="bold">Logon triggers may affect performance.</span> In addition, test the logon trigger on a sample schema user first before creating it for the database. That way, if there is an error, you can easily correct it.</p>
</li>
<li>
<p><span class="bold">Be aware of situations in which if you have a changing set of books, or if positions change constantly.</span> In these cases, the new attribute values may not be picked up right away, and you must force a cursor <a id="sthref1212"></a>reparse to pick them up.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
A <a id="sthref1213"></a><a id="sthref1214"></a>logon trigger can be used because the user context (information such as <code>EMPNO</code>, <code>GROUP</code>, <code>MANAGER</code>) should be set before the user accesses any data.</div>
</div>
<!-- class="sect2" -->
<a id="CIHDAJDF"></a>
<div id="DBSEG98168" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Tutorial: Creating and Using a Database Session-Based Application Context</h3>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BABIBCHC">About This Tutorial</a></p>
</li>
<li>
<p><a href="#CIHEJDJB">Step 1: Create User Accounts and Ensure the User SCOTT Is Active</a></p>
</li>
<li>
<p><a href="#CIHJGDGE">Step 2: Create the Database Session-Based Application Context</a></p>
</li>
<li>
<p><a href="#CIHBCIHG">Step 3: Create a Package to Retrieve Session Data and Set the Application Context</a></p>
</li>
<li>
<p><a href="#CIHDBACG">Step 4: Create a Logon Trigger for the Package</a></p>
</li>
<li>
<p><a href="#CIHEGFCH">Step 5: Test the Application Context</a></p>
</li>
<li>
<p><a href="#CIHHGDII">Step 6: Remove the Components for This Tutorial</a></p>
</li>
</ul>
<a id="BABIBCHC"></a>
<div id="DBSEG98509" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About This Tutorial</h4>
<p><a id="sthref1215"></a><a id="sthref1216"></a>This tutorial shows how to create an application context that checks the employee ID of any database user who tries to log in to the database.</p>
</div>
<!-- class="sect3" -->
<a id="CIHEJDJB"></a>
<div id="DBSEG98169" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 1: Create User Accounts and Ensure the User SCOTT Is Active</h4>
<ol>
<li>
<p>Log on as user <code>SYS</code> and connect using the <code>AS SYSDBA</code> privilege.</p>
<pre>
sqlplus sys as sysdba
Enter password: <span class="italic">password</span>
</pre></li>
<li>
<p>Create the <code>sysadmin_ctx</code> account, who will administer the database session-based application context.</p>
<pre>
GRANT CREATE SESSION, CREATE ANY CONTEXT, CREATE PROCEDURE, CREATE TRIGGER, ADMINISTER DATABASE TRIGGER TO sysadmin_ctx IDENTIFIED BY <span class="italic">password</span>;
GRANT SELECT ON HR.EMPLOYEES TO sysadmin_ctx;
GRANT EXECUTE ON DBMS_SESSION TO sysadmin_ctx;
</pre>
<p>Replace <code><span class="codeinlineitalic">password</span></code> with a password that is secure. See <a href="authentication.htm#CHDFDHAJ">"Minimum Requirements for Passwords"</a> for more information.</p>
</li>
<li>
<p>Create the following user account for Lisa Ozer, who is listed as having <code>lozer</code> for her email account in the <code>HR.EMPLOYEES</code> table.</p>
<pre>
GRANT CREATE SESSION TO LOZER IDENTIFIED BY <span class="italic">password</span>;
</pre>
<p>Replace <code><span class="codeinlineitalic">password</span></code> with a password that is secure. See <a href="authentication.htm#CHDFDHAJ">"Minimum Requirements for Passwords"</a> for more information.</p>
</li>
<li>
<p>The sample user <code>SCOTT</code> will also be used in this tutorial, so query the <code>DBA_USERS</code> data dictionary view to ensure that <code>SCOTT</code> is not locked or expired.</p>
<pre>
SELECT USERNAME, ACCOUNT_STATUS FROM DBA_USERS WHERE USERNAME = 'SCOTT';
</pre>
<p>If the <code>DBA_USERS</code> view lists user <code>SCOTT</code> as locked and expired, then enter the following statement to unlock the <code>SCOTT</code> account and create a new password for him:</p>
<pre>
ALTER USER SCOTT ACCOUNT UNLOCK IDENTIFIED BY <span class="italic">password</span>;
</pre>
<p>Enter a password that is secure. For greater security, do <span class="bold">not</span> give the <code>SCOTT</code> account the same password from previous releases of Oracle Database. See <a href="authentication.htm#CHDFDHAJ">"Minimum Requirements for Passwords"</a> for the minimum requirements for creating passwords.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CIHJGDGE"></a>
<div id="DBSEG98170" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 2: Create the Database Session-Based Application Context</h4>
<ol>
<li>
<p>Log on to SQL*Plus as <code>sysadmin_ctx</code>.</p>
<pre>
CONNECT sysadmin_ctx
Enter password: <span class="italic">password</span>
</pre></li>
<li>
<p>Create the application context using the following statement:</p>
<pre>
CREATE CONTEXT empno_ctx USING set_empno_ctx_pkg;
</pre>
<p>Remember that even though user <code>sysadmin_ctx</code> has created this application context, the <code>SYS</code> schema owns the context.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CIHBCIHG"></a>
<div id="DBSEG66353" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 3: Create a Package to Retrieve Session Data and Set the Application Context</h4>
<p><a href="#CIHHCEAJ">Example 6-7</a> shows how to create the package you need to retrieve the session data and set the application context. Before creating the package, ensure that you are still logged on as user <code>sysadmin_ctx</code>. (You can copy and paste this text by positioning the cursor at the start of <code>CREATE OR REPLACE</code> in the first line.)</p>
<div id="DBSEG98171" class="example">
<p class="titleinexample"><a id="CIHHCEAJ"></a>Example 6-7 Package to Retrieve Session Data and Set a Database Session Context</p>
<div class="inftblsimple">
<table class="cellalignment1579" title="set_empno_ctx_pkg example" summary="set_empno_ctx_pkg example, line numbers and code, listed left to right" dir="ltr">
<tbody>
<tr class="cellalignment1570">
<td class="cellalignment1578">
<pre>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td>
<td class="cellalignment1578">
<pre>
CREATE OR REPLACE PACKAGE set_empno_ctx_pkg IS 
   PROCEDURE set_empno; 
 END; 
 /
 CREATE OR REPLACE PACKAGE BODY set_empno_ctx_pkg IS
   PROCEDURE set_empno 
   IS 
    emp_id NUMBER;
   BEGIN 
    SELECT EMPLOYEE_ID INTO emp_id FROM HR.EMPLOYEES 
       WHERE email = SYS_CONTEXT('USERENV', 'SESSION_USER');
    DBMS_SESSION.SET_CONTEXT('empno_ctx', 'employee_id', emp_id);
   EXCEPTION  
    WHEN NO_DATA_FOUND THEN NULL;
  END;
 END;
/
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblsimple" --></div>
<!-- class="example" -->
<p>This package creates a procedure called <code>set_empno</code> that performs the following actions:</p>
<ul>
<li>
<p><span class="bold">Line 8:</span> Declares a variable, <code>emp_id</code>, to store the employee ID for the user who logs on.</p>
</li>
<li>
<p><span class="bold">Line 10:</span> Performs a <code>SELECT</code> statement to copy the employee ID that is stored in the <code>employee_id</code> column data from the <code>HR.EMPLOYEES</code> table into the <code>emp_id</code> variable.</p>
</li>
<li>
<p><span class="bold">Line 11:</span> Uses a <code>WHERE</code> clause to find all employee IDs that match the email account for the session user. The <code>SYS_CONTEXT</code> function uses the predefined <code>USERENV</code> context to retrieve the user session ID, which is the same as the <code>email</code> column data. For example, the user ID and email address for Lisa Ozer are both the same: <code>lozer</code>.</p>
</li>
<li>
<p><span class="bold">Line 12:</span> Uses the <code>DBMS_SESSION.SET_CONTEXT</code> procedure to set the application context:</p>
<ul>
<li>
<p><code>'empno_ctx'</code>: Calls the application context <code>empno_ctx</code>. Enclose <code>empno_ctx</code> in single quotes.</p>
</li>
<li>
<p><code>'employee_id'</code>: Creates the attribute value of the <code>empno_ctx</code> application context name-value pair, by naming it <code>employee_id</code>. Enclose <code>employee_id</code> in single quotes.</p>
</li>
<li>
<p><code>emp_id</code>: Sets the value for the <code>employee_id</code> attribute to the value stored in the <code>emp_id</code> variable. The <code>emp_id</code> variable was created in <span class="bold">Line 8</span> and the employee ID was retrieved in <span class="bold">Lines 10&ndash;11</span>.</p>
</li>
</ul>
<p>To summarize, the <code>set_empno_ctx_pkg.set_empno</code> procedure says, "Get the session ID of the user and then match it with the employee ID and email address of any user listed in the <code>HR.EMPLOYEES</code> table."</p>
</li>
<li>
<p><span class="bold">Lines 13&ndash;14:</span> Add a<a id="sthref1217"></a> <code>WHEN NO_DATA_FOUND</code> system exception to catch any <code>no data found</code> errors that may result from the <code>SELECT</code> statement in <span class="bold">Lines 10&ndash;11</span>. (Without this exception, the package and logon trigger will work fine and set the application context as needed, but then any non-system administrator users other than the users listed in the <code>HR.EMPLOYEES</code> table will not be able to log in to the database. Other users should be able to log in to the database, assuming they are valid database users. Once the application context information is set, then you can use this session information as a way to control user access to a particular application.)</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CIHDBACG"></a>
<div id="DBSEG98172" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 4: Create a Logon Trigger for the Package</h4>
<p>As user <code>sysadmin_ctx</code>, create the following trigger:</p>
<pre>
CREATE TRIGGER set_empno_ctx_trig AFTER LOGON ON DATABASE
 BEGIN
  sysadmin_ctx.set_empno_ctx_pkg.set_empno;
 END;
/
</pre></div>
<!-- class="sect3" -->
<a id="CIHEGFCH"></a>
<div id="DBSEG98173" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 5: Test the Application Context</h4>
<ol>
<li>
<p>Log on as user <code>lozer</code>.</p>
<pre>
CONNECT lozer
Enter password: <span class="italic">password</span>
</pre>
<p>When user <code>lozer</code> logs on, the <code>empno_ctx</code> application context collects her employee ID. You can check it as follows:</p>
<pre>
SELECT SYS_CONTEXT('empno_ctx', 'employee_id') emp_id FROM DUAL;
</pre>
<p>The following output should appear:</p>
<pre>
EMP_ID
--------------------------------------------------------
168
</pre></li>
<li>
<p>Log on as user <code>SCOTT</code>.</p>
<pre>
CONNECT SCOTT
Enter password: <span class="italic">password</span>
</pre>
<p>User <code>SCOTT</code> is not listed as an employee in the <code>HR.EMPLOYEES</code> table, so the <code>empno_ctx</code> application context cannot collect an employee ID for him.</p>
<pre>
SELECT SYS_CONTEXT('empno_ctx', 'employee_id') emp_id FROM DUAL;
</pre>
<p>The following output should appear:</p>
<pre>
EMP_ID
--------------------------------------------------------
</pre></li>
</ol>
<p>From here, the application can use the user session information to determine how much access the user can have in the database. You can use Oracle Virtual Private Database to accomplish this. See <a href="vpd.htm#CIHBAJGI">Chapter 7, "Using Oracle Virtual Private Database to&nbsp;Control&nbsp;Data Access"</a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHHGDII"></a>
<div id="DBSEG98174" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 6: Remove the Components for This Tutorial</h4>
<ol>
<li>
<p>Log on as <code>SYS</code> and connect using <code>AS SYSDBA</code>.</p>
<pre>
CONNECT SYS/AS SYSDBA
Enter password: <span class="italic">password</span>
</pre></li>
<li>
<p>Drop the users <code>sysadmin_ctx</code> and <code>lozer</code>:</p>
<pre>
DROP USER sysadmin_ctx CASCADE;
DROP USER lozer;
</pre></li>
<li>
<p>Drop the application context.</p>
<pre>
DROP CONTEXT empno_ctx;
</pre>
<p>Remember that even though <code>sysadmin_ctx</code> created the application context, it is owned by the <code>SYS</code> schema.</p>
</li>
<li>
<p>If you want, lock and expire <code>SCOTT</code>, unless other users want to use this account:</p>
<pre>
ALTER USER SCOTT PASSWORD EXPIRE ACCOUNT LOCK; 
</pre></li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1008738"></a>
<div id="DBSEG70744" class="sect2"><a id="CHDJFHDH"></a>
<h3 class="sect2">Initializing Database Session-Based Application Contexts Externally</h3>
<p>When<a id="sthref1218"></a> you initialize a database session-based application context externally, you specify a special type of namespace that accepts the initialization of attribute values from external resources and then stores them in the local user session. Initializing an application context externally enhances performance because it is stored in the UGA and enables the automatic propagation of attributes from one session to another. <a id="sthref1219"></a><a id="sthref1220"></a>Connected user database links are supported only by application contexts initialized from OCI-based external sources.</p>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#i1008761">Obtaining Default Values from Users</a></p>
</li>
<li>
<p><a href="#i1008766">Obtaining Values from Other External Resources</a></p>
</li>
<li>
<p><a href="#CIHDDDJD">Initializing Application Context Values from a Middle-Tier Server</a></p>
</li>
</ul>
<a id="i1008761"></a>
<div id="DBSEG98175" class="sect3">
<h4 class="sect3">Obtaining Default Values from Users</h4>
<p>Sometimes you need the default values from users. Initially, these default values may be hints or preferences, and then after validation, they become trusted contexts. Similarly, it may be more convenient for clients to initialize some default values, and then rely on a login event trigger or applications to validate the values.</p>
<p>For job queues, the job submission routine records the context being set at the time the job is submitted, and restores it when executing the batched job. To maintain the integrity of the context, job queues cannot bypass the designated PL/SQL package to set the context. Rather, the externally initialized application context accepts initialization of context values from the job queue process.</p>
<p>Automatic propagation of context to a remote session may create security problems. Developers or administrators can effectively handle the context that takes default values from resources other than the designated PL/SQL procedure by using logon triggers to reset the context when users log in.</p>
</div>
<!-- class="sect3" -->
<a id="i1008766"></a>
<div id="DBSEG98176" class="sect3">
<h4 class="sect3">Obtaining Values from Other External Resources</h4>
<p>You can create an application context that accepts the initialization of attributes and values through external resources. Examples include an OCI interface, a job queue process, or a database link.</p>
<p>Externally initialized application contexts provide the following features:</p>
<ul>
<li>
<p>For remote sessions, automatic propagation of context values that are in the externally initialized application context namespace</p>
</li>
<li>
<p>For job queues, restoration of context values that are in the externally initialized application context namespace</p>
</li>
<li>
<p>For OCI interfaces, a mechanism to initialize context values that are in the externally initialized application context namespace</p>
</li>
</ul>
<p>Although any client program that is using Oracle Call Interface can initialize this type of namespace, you can use login event triggers to verify the values. It is up to the application to interpret and trust the values of the attributes.</p>
<p><a href="#CIHFBBFH">Example 6-8</a> shows how to create a database session-based application context that obtains values from an external source.</p>
<div id="DBSEG98177" class="example">
<p class="titleinexample"><a id="CIHFBBFH"></a>Example 6-8 Creating an Externalized Database Session-based Application Context</p>
<pre>
CREATE CONTEXT ext_ctx USING ext_ctx_pkg INITIALIZED EXTERNALLY;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CIHDDDJD"></a>
<div id="DBSEG98178" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Initializing Application Context Values from a Middle-Tier Server</h4>
<p>Middle-tier servers can initialize application context values on behalf of database users. Context attributes are propagated for the remote session at initialization time, and the remote database accepts the values if the namespace is externally initialized.</p>
<p>For example, a three-tier application creating lightweight user sessions through OCI or JDBC/OCI can access the <code><a id="sthref1221"></a>PROXY_USER</code> attribute in <code>USERENV</code>. This attribute enables you to determine if the user session was created by a <a id="sthref1222"></a>middle-tier application. You could allow a user to access data only for connections where the user is proxied. If users connect directly to the database, then they would not be able to access any data.</p>
<p>You can use the <code>PROXY_USER</code> attribute from the <code>USERENV</code> namespace within Oracle Virtual Private Database to ensure that users only access data through a particular middle-tier application. For a different approach, you can develop a secure application role to enforce your policy that users access the database only through a specific proxy.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="authentication.htm#CHDBAHIB">"Preserving User Identity in Multitiered Environments"</a> for information about proxy authentication and about using the <code>USERENV</code> attribute <code>CLIENT_IDENTIFIER</code> to preserve user identity across multiple tiers</p>
</li>
<li>
<p><a href="authentication.htm#i1010326">"Using a Middle Tier Server for Proxy Authentication"</a> for information about using a secure application role to enforce a policy through a specific proxy</p>
</li>
<li>
<p><a class="olink JJDBC" href="../../java.111/b31224/toc.htm"><span class="italic">Oracle Database JDBC Developer's Guide and Reference</span></a></p>
</li>
<li>
<p><a class="olink LNOCI840" href="http://www.oracle.com/pls/topic/lookup?ctx=db111&amp;id=LNOCI840"><span class="italic">Oracle Call Interface Programmer's Guide</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDFECDG"></a>
<div id="DBSEG70745" class="sect2">
<h3 class="sect2">Initializing Database Session-Based Application Contexts Globally</h3>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BABGEJDJ">About Initializing Database Session-Based Application Contexts Globally</a></p>
</li>
<li>
<p><a href="#i1009116">Using Database Session-Based Application Contexts with LDAP</a></p>
</li>
<li>
<p><a href="#i1008839">How Globally Initialized Database Session-Based Application Contexts Work</a></p>
</li>
<li>
<p><a href="#i1008843">Example of Initializing a Database Session-Based Application Context Globally</a></p>
</li>
</ul>
<a id="BABGEJDJ"></a>
<div id="DBSEG98508" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About Initializing Database Session-Based Application Contexts Globally</h4>
<p>You<a id="sthref1223"></a> can use a centralized location to store the database session-based application context of the user. This enables applications to set up a user context during initialization based upon user identity. In particular, this feature supports Oracle Label Security labels and privileges. Initializing an application context globally makes it easier to manage contexts for large numbers of users and databases.</p>
<p>For example, many organizations want to manage user information centrally, in an LDAP-based directory. Enterprise User Security, a feature of Oracle Advanced Security, supports centralized user and authorization management in Oracle Internet Directory. However, there may be additional attributes an application must retrieve from Lightweight Directory Access Protocol (LDAP) to use for Oracle Virtual Private Database enforcement, such as the user title, organization, or physical location. Initializing an application context globally enables you to retrieve these types of attributes.</p>
</div>
<!-- class="sect3" -->
<a id="i1009116"></a>
<div id="DBSEG98179" class="sect3">
<h4 class="sect3">Using Database Session-Based Application Contexts with LDAP</h4>
<p>An application context that is initialized globally uses LDAP, a standard, extensible, and efficient directory access protocol. The LDAP directory stores a list of users to which this application is assigned. Oracle Database uses a directory service, typically Oracle Internet Directory, to authenticate and authorize enterprise users.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Enterprise User Security requires Oracle Advanced Security.</p>
</li>
<li>
<p>You can use third-party directories such as Microsoft Active Directory and Sun Microsystems SunONE as the directory service.</p>
</li>
</ul>
</div>
<p>The <code>orclDBApplicationContext</code> LDAP object (a subclass of <code>groupOfUniqueNames</code>) stores the application context values in the directory. The location of the application context object is described in <a href="#BHAGIEHB">Figure 6-1</a>, which is based on the Human Resources example.</p>
<p>On the LDAP side, an internal C function is required to retrieve the <code>orclDBApplicationContext</code> value, which returns a list of application context values to the database. In this example, <code>HR</code> is the namespace; Title and Project are the attributes; and Manager and Promotion are the values.</p>
<div id="DBSEG98180" class="figure">
<p class="titleinfigure"><a id="BHAGIEHB"></a>Figure 6-1 Location of Application Context in LDAP Directory Information Tree</p>
<img width="392" height="363" src="img/adfns001.gif" alt="Description of Figure 6-1 follows" /><br />
<a id="sthref1224" href="img_text/adfns001.htm">Description of "Figure 6-1 Location of Application Context in LDAP Directory Information Tree"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<a id="i1008839"></a>
<div id="DBSEG98181" class="sect3">
<h4 class="sect3">How Globally Initialized Database Session-Based Application Contexts Work</h4>
<p>To use a globally initialized secure application, you need to first configure <a id="sthref1225"></a>Enterprise User Security, a feature of Oracle Advanced Security. Then, you set up the application context values for the user in the database and the directory.</p>
<p>When a global user (enterprise user) connects to the database, Enterprise User Security verifies the identity of the user connecting to the database. After authentication, the global user roles and application context are retrieved from the directory. When the user logs on to the database, the global roles and initial application context are already set.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink DBIMI" href="../b28528/toc.htm"><span class="italic">Oracle Database Enterprise User Security Administrator's Guide</span></a> for information about configuring Enterprise User Security</div>
</div>
<!-- class="sect3" -->
<a id="i1008843"></a>
<div id="DBSEG98182" class="sect3">
<h4 class="sect3">Example of Initializing a Database Session-Based Application Context Globally</h4>
<p>You can configure and store the initial application context for a user, such as the department name and title, in the LDAP directory. The values are retrieved during user login so that the context is set properly. In addition, any information related to the user is retrieved and stored in the <code>SYS_USER_DEFAULTS</code> application context namespace. The following procedure shows how this is accomplished:</p>
<ol>
<li>
<p>Create the application context in the database.</p>
<pre>
CREATE CONTEXT hr USING hrapps.hr_manage_pkg INITIALIZED GLOBALLY;
</pre></li>
<li>
<p>Create and add new entries in the LDAP directory.</p>
<p>An example of the entries added to the LDAP directory follows. These entries create an attribute named <code>Title</code> with the attribute value <code>Manager</code> for the application (namespace) <code>HR</code>, and assign user names <code>user1</code> and <code>user2</code>. In the following, <code>cn=example</code> refers to the name of the domain.</p>
<pre>
dn: cn=OracleDBAppContext,cn=example,cn=OracleDBSecurity,cn=Products,cn=OracleContext,ou=Americas,o=oracle,c=US
changetype: add
cn: OracleDBAppContext
objectclass: top
objectclass: orclContainer

dn: cn=hr,cn=OracleDBAppContext,cn=example,cn=OracleDBSecurity,cn=Products,cn=OracleContext,ou=Americas,o=oracle,c=US
changetype: add
cn: hr
objectclass: top
objectclass: orclContainer

dn: cn=Title,cn=hr, cn=OracleDBAppContext,cn=example,cn=OracleDBSecurity,cn=Products,cn=OracleContext,ou=Americas,o=oracle,c=US
changetype: add
cn: Title
objectclass: top
objectclass: orclContainer

dn: cn=Manager,cn=Title,cn=hr, cn=OracleDBAppContext,cn=example,cn=OracleDBSecurity,cn=Products,cn=OracleContext,ou=Americas,o=oracle,c=US
cn: Manager
objectclass: top
objectclass: groupofuniquenames
objectclass: orclDBApplicationContext
uniquemember: CN=user1,OU=Americas,O=Oracle,L=Redwoodshores,ST=CA,C=US
uniquemember: CN=user2,OU=Americas,O=Oracle,L=Redwoodshores,ST=CA,C=US
</pre></li>
<li>
<p>If an LDAP <code>inetOrgPerson</code> object entry exists for the user, then the connection retrieves the attributes from <code>inetOrgPerson</code>, and assigns them to the namespace <code>SYS_LDAP_USER_DEFAULT</code>. The following is an example of an <code>inetOrgPerson</code> entry:</p>
<pre>
dn: cn=user1,ou=Americas,O=oracle,L=redwoodshores,ST=CA,C=US
changetype: add
objectClass: top
objectClass: person
objectClass: organizationalPerson
objectClass: inetOrgPerson
cn: user1
sn: One
givenName: User
initials: UO
title: manager, product development
uid: uone
mail: uone@us.example.com
telephoneNumber: +1 650 555 0105
employeeNumber: 00001
employeeType: full time
</pre></li>
<li>
<p>Connect to the database.</p>
<p>When <code>user1</code> connects to a database that belongs to the <code>example</code> domain, <code>user1</code> will have his <code>Title</code> set to <code>Manager</code>. Any information related to <code>user1</code> will be retrieved from the LDAP directory. The value can be obtained using the following syntax:</p>
<pre>
SYS_CONTEXT('<span class="italic">namespace</span>','<span class="italic">attribute name</span>') 
</pre>
<p>For example:</p>
<pre>
DECLARE 
 tmpstr1 VARCHAR2(30);
 tmpstr2 VARCHAR2(30);
BEGIN
 tmpstr1 = SYS_CONTEXT('HR','TITLE);
 tmpstr2 = SYS_CONTEXT('SYS_LDAP_USER_DEFAULT','telephoneNumber');
 DBMS_OUTPUT.PUT_LINE('Title is ' || tmpstr1);
 DBMS_OUTPUT.PUT_LINE('Telephone Number is ' || tmpstr2);
END;
</pre>
<p>The output of this example is:</p>
<pre>
Title is Manager
Telephone Number is +1 650 555 0105
</pre></li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006405"></a>
<div id="DBSEG98183" class="sect2">
<h3 class="sect2">Using Externalized Database Session-Based Application Contexts</h3>
<p><a id="sthref1226"></a>Many applications store attributes used for fine-grained access control within a database metadata table. For example, an <code>employees</code> table could include cost center, title, signing authority, and other information useful for fine-grained access control. Organizations also centralize user information for user management and access control in LDAP-based directories, such as Oracle Internet Directory. Application context attributes can be stored in Oracle Internet Directory, and assigned to one or more enterprise users. They can also be retrieved automatically upon login for an enterprise user, and then used to initialize an application context.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Enterprise User Security is a feature of Oracle Advanced Security.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1008738">"Initializing Database Session-Based Application Contexts Externally"</a> for information about initializing local application context through external resources such as an OCI interface, a job queue process, or a database link</p>
</li>
<li>
<p><a href="#CHDFECDG">"Initializing Database Session-Based Application Contexts Globally"</a> for information about initializing local application context through a centralized resource, such as Oracle Internet Directory</p>
</li>
<li>
<p><a class="olink DBIMI" href="../b28528/toc.htm"><span class="italic">Oracle Database Enterprise User Security Administrator's Guide</span></a> for information about enterprise users</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHFJHCG"></a>
<div id="DBSEG70005" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using Global Application Contexts</h2>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CIHGCIHB">About Global Application Contexts</a></p>
</li>
<li>
<p><a href="#CIHBIBAG">Creating a Global Application Context</a></p>
</li>
<li>
<p><a href="#i1008706">Creating a PL/SQL Package to Manage a Global Application Context</a></p>
</li>
<li>
<p><a href="#CIHFDEBD">Embedding Calls in Middle-Tier Applications to Manage the Client Session ID</a></p>
</li>
<li>
<p><a href="#CIHIABHH">Tutorial: Creating a Global Application Context That Uses a Client Session ID</a></p>
</li>
<li>
<p><a href="#i1008653">Global Application Context Processes</a></p>
</li>
</ul>
<a id="CIHGCIHB"></a>
<div id="DBSEG98184" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Global Application Contexts</h3>
<p><a id="sthref1227"></a>A <a id="sthref1228"></a>global application context enables application context values to be accessible across database sessions. Oracle Database stores the global application context information in the <a id="sthref1229"></a><a id="sthref1230"></a>System (sometimes called "Shared") Global Area (SGA) so that it can be used for applications that use a sessionless model, such as middle-tier applications in a three-tiered architecture. These applications cannot use a session-based application context because users authenticate to the application, and then it typically connects to the database as a single identity. Oracle Database initializes the global application context once, rather than for each user session. This improves performance, because connections are reused from a connection pool.</p>
<p>There are three general uses for global application contexts:</p>
<ul>
<li>
<p><span class="bold">You must share application values globally for all database users.</span> For example, you may need to disable access to an application based on a specific situation. In this case, the values the application context sets are not user-specific, nor are they based on the private data of a user. The application context defines a situation, for example, to indicate the version of application module that is running.</p>
</li>
<li>
<p><span class="bold">You have database users who must move from one application to another.</span> In this case, the second application the user is moving to has different access requirements from the first application.</p>
</li>
<li>
<p><span class="bold">You must authenticate <a id="sthref1231"></a><a id="sthref1232"></a><a id="sthref1233"></a><a id="sthref1234"></a>nondatabase users, <a id="sthref1235"></a>that is, users who are not known to the database.</span> This type of <a id="sthref1236"></a>user, who does not have a database account, typically connects through a Web application by using a connection pool. These types of applications connect users to the database as single user, using the One Big Application User authentication model. To authenticate this type of user, you use the client session ID of the user.</p>
</li>
</ul>
<p>A <a id="sthref1237"></a>global application context has the following components:</p>
<ul>
<li>
<p><span class="bold">The global application context.</span> You use the <code>CREATE CONTEXT</code> SQL statement to create the global application context, and include the <code>ACCESSED GLOBALLY</code> clause in the statement. This statement names the application context and associates it with a PL/SQL procedure that is designed to set the application data context data. The global application context is created and stored in the database schema of the security administrator who creates it.</p>
</li>
<li>
<p><span class="bold">A PL/SQL package to set the attributes.</span> The package must contain a procedure that uses the <code>DBMS_SESSION.SET_CONTEXT</code> procedure to set the global application context. The <code>SET_CONTEXT</code> procedure provides parameters that enable you to create a global application context that fits any of the three user situations described in this section. You create, store, and run the PL/SQL package on the database server. Typically, it belongs in the schema of the security administrator who created it.</p>
</li>
<li>
<p><span class="bold">A middle-tier application to get and set the client session ID.</span> For nondatabase users, which require a client session ID to be authenticated, you can use the Oracle Call Interface (OCI) calls in the middle-tier application to retrieve and set their session data. You can also use the <a id="sthref1238"></a><a id="sthref1239"></a><code>DBMS_SESSION.SET_IDENTIFIER</code> procedure to set the client session ID. An advantage of creating a client session ID to store the nondatabase user's name is that you can query the <code>CLIENT_ID</code> column of <code>DBA_AUDIT_TRAIL</code>, <code>DBA_FGA_AUDIT_TRAIL</code>, and <code>DBA_COMMON_AUDIT_TRAIL</code> data dictionary views to audit this user's activity.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Be aware that the <code>DBMS_APPLICATION_INFO.SET_CLIENT_INFO</code> setting can overwrite the value. See <a href="authentication.htm#CHDBBEFF">"Using the DBMS_SESSION PL/SQL Package to Set and Clear the Client Identifier"</a> for more information.</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CIHBIBAG"></a>
<div id="DBSEG98185" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating a Global Application Context</h3>
<p><a id="sthref1240"></a>To create a global application context, use the <code>CREATE CONTEXT</code> SQL statement to create the application context and include the <code>ACCESSED GLOBALLY</code> clause in the statement. You must have the <code>CREATE ANY CONTEXT</code> system privilege before you can use the <code>CREATE CONTEXT</code> statement, and the <code>DROP ANY CONTEXT</code> privilege before you can drop the context with the <code>DROP CONTEXT</code> statement. As with local application contexts, the global application context is created and stored in the database schema of a security administrator.</p>
<p><a id="sthref1241"></a>The ownership of the global application context is as follows: Even though a user who has been granted the <code>CREATE ANY CONTEXT</code> and <code>DROP ANY CONTEXT</code> privileges can create and drop the global application context, it is owned by the <code>SYS</code> schema. Oracle Database associates the context with the schema account that created it, but if you drop this user, the context still exists in the <code>SYS</code> schema. As user <code>SYS</code>, you can drop the application context.</p>
<p><a href="#CIHICHCD">Example 6-9</a> shows how to create the global application context <code>global_hr_ctx</code>, which is set by the <code>hr_ctx_pkg</code> package.</p>
<div id="DBSEG98186" class="example">
<p class="titleinexample"><a id="CIHICHCD"></a>Example 6-9 Creating a Global Application Context</p>
<pre>
CREATE OR REPLACE CONTEXT global_hr_ctx USING hr_ctx_pkg ACCESSED GLOBALLY;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1008706"></a>
<div id="DBSEG98187" class="sect2">
<h3 class="sect2">Creating a PL/SQL Package to Manage a Global Application Context</h3>
<p><a id="sthref1242"></a>This section contains:</p>
<ul>
<li>
<p><a href="#CIHHBFJB">About the Package That Manages the Global Application Context</a></p>
</li>
<li>
<p><a href="#CIHDFGAC">Setting the DBMS_SESSION.SET_CONTEXT username and client_id Parameters</a></p>
</li>
<li>
<p><a href="#CIHCJHDD">Sharing Global Application Context Values for All Database Users</a></p>
</li>
<li>
<p><a href="#CIHGBBJC">Setting a Global Context for Database Users Who Move Between Applications</a></p>
</li>
<li>
<p><a href="#CIHEEJCD">Setting a Global Application Context for Nondatabase Users</a></p>
</li>
<li>
<p><a href="#CIHEIIGA">Clearing Session Data When the Session Closes</a></p>
</li>
</ul>
<p>For detailed information about the <code>DBMS_SESSION</code> package, see <a class="olink ARPLS054" href="../../appdev.111/b28419/d_sessio.htm#ARPLS054"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
<a id="CIHHBFJB"></a>
<div id="DBSEG98188" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About the Package That Manages the Global Application Context</h4>
<p>The task of the <a id="sthref1243"></a>PL/SQL package that you associate with a global application context is to use the <code>DBMS_SESSION</code> package to set and clear the global application context values. You must have <code>EXECUTE</code> privileges for the <code>DBMS_SESSION</code> package before you use its procedures. Typically, you create and store this package in the database schema of a security administrator. The <code>SYS</code> schema owns the <code>DBMS_SESSION</code> package.</p>
<p>Unlike PL/SQL packages used to set a local application context, you do not include a <code>SYS_CONTEXT</code> function to get the user session data. You do not need to include this function because the owner of the session, recorded in the <code>USERENV</code> context, is the same for every user who is connecting.</p>
<p>You can run the procedures within the PL/SQL package for a global application context at any time. You do not need to create logon and logoff triggers to execute the package procedures associated with the global application context. A common practice is to run the package procedures from within the database application. Additionally, for nondatabase users, you use middle-tier applications to get and set client session IDs.</p>
</div>
<!-- class="sect3" -->
<a id="CIHDFGAC"></a>
<div id="DBSEG77432" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Setting the DBMS_SESSION.SET_CONTEXT username and client_id Parameters</h4>
<p>In <a id="sthref1244"></a>addition to the <code>namespace</code>, <code>attribute</code>, and <code>value</code> parameters, the <code>DBMS_SESSION.SYS_CONTEXT</code> procedure provides the <code>client_id</code> and <code>username</code> parameters. Use these settings for global application contexts. <a href="#CIHJGGGF">Table 6-2</a> explains how the combination of these settings controls the type of global application context you can create.</p>
<div id="DBSEG98189" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref1245"></a><a id="CIHJGGGF"></a>Table 6-2 Setting the DBMS_SESSION.SET_CONTEXT username and client_id Parameters</p>
<table class="cellalignment1576" title="Setting the DBMS_SESSION.SET_CONTEXT username and client_id Parameters" summary="Results of Setting the DBMS_SESSION.SYS_CONTEXT username and client_id Parameters" dir="ltr">
<thead>
<tr class="cellalignment1570">
<th class="cellalignment1577" id="r1c1-t17">Combination&nbsp;Settings&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
<th class="cellalignment1577" id="r1c2-t17">Result</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1570">
<td class="cellalignment1578" id="r2c1-t17" headers="r1c1-t17">
<p><code>username</code> set to <code>NULL</code></p>
<p><code>client_id</code> set to <code>NULL</code></p>
</td>
<td class="cellalignment1578" headers="r2c1-t17 r1c2-t17">
<p>This combination enables all users to access the application context. See <a href="#CIHCJHDD">"Sharing Global Application Context Values for All Database Users"</a> for more information.</p>
<p>These settings are also used for database session-based application contexts. See <a href="#CHDBDJGC">"Using Database Session-Based Application Contexts"</a> for more information.</p>
</td>
</tr>
<tr class="cellalignment1570">
<td class="cellalignment1578" id="r3c1-t17" headers="r1c1-t17">
<p><code>username</code> set to a value</p>
<p><code>client_id</code> set to <code>NULL</code></p>
</td>
<td class="cellalignment1578" headers="r3c1-t17 r1c2-t17">
<p>This combination enables an application context to be accessed by multiple sessions, as long as the <code>username</code> setting is the same throughout. Ensure that the user name specified is a valid database user. See <a href="#CIHGBBJC">"Setting a Global Context for Database Users Who Move Between Applications"</a> for more information.</p>
</td>
</tr>
<tr class="cellalignment1570">
<td class="cellalignment1578" id="r4c1-t17" headers="r1c1-t17">
<p><code>username</code> set to <code>NULL</code></p>
<p><code>client_id</code> set to a value</p>
</td>
<td class="cellalignment1578" headers="r4c1-t17 r1c2-t17">
<p>This combination enables an application to be accessed by multiple user sessions, as long as the <code>client_id</code> parameter is set to the same value throughout. This enables sessions of all users to see the application context values.</p>
</td>
</tr>
<tr class="cellalignment1570">
<td class="cellalignment1578" id="r5c1-t17" headers="r1c1-t17">
<p><code>username</code> set to a value</p>
<p><code>client_id</code> set to a value</p>
</td>
<td class="cellalignment1578" headers="r5c1-t17 r1c2-t17">
<p>This combination enables the following two scenarios:</p>
<ul>
<li>
<p><span class="bold">Lightweight users.</span> If the user does not have a database account, the username specified is a connection pool owner. The <code>client_id</code> setting is then associated with the nondatabase user who is logging in.</p>
</li>
<li>
<p><span class="bold">Database users.</span> If the user is a database user, this combination can be used for stateless Web sessions.</p>
</li>
</ul>
<p>Setting the <code>username</code> parameter in the <code>SET_CONTEXT</code> procedure to <code>USER</code> calls the Oracle Database-supplied <code><a id="sthref1246"></a><a id="sthref1247"></a>USER</code> function. The <code>USER</code> function specifies the session owner from the application context retrieval process and ensures that only the user who set the application context can access the context. See <a class="olink SQLRF06156" href="../../server.111/b28286/functions215.htm#SQLRF06156"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about the <code>USER</code> function.</p>
<p>See <a href="#CIHEEJCD">"Setting a Global Application Context for Nondatabase Users"</a> for more information.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" --></div>
<!-- class="sect3" -->
<a id="CIHCJHDD"></a>
<div id="DBSEG98190" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Sharing Global Application Context Values for All Database Users</h4>
<p><a id="sthref1248"></a>To share global application values for all database users, set the <code>namespace</code>, <code>attribute</code>, and <code>value</code> parameters in the <code>SET_CONTEXT</code> procedure. In this scenario, <span class="italic">all</span> users who have database accounts will potentially have access to data in the database.</p>
<p><a href="#CIHCBBCI">Example 6-10</a> shows<a id="sthref1249"></a> how to create a package that sets and clears this type of global application context.</p>
<div id="DBSEG98191" class="example">
<p class="titleinexample"><a id="CIHCBBCI"></a>Example 6-10 Package to Manage Global Application Values for All Database Users</p>
<div class="inftblsimple">
<table class="cellalignment1579" title="hr_ctx_pkg example" summary="hr_ctx_pkg example, line numbers and code, listed left to right" dir="ltr">
<tbody>
<tr class="cellalignment1570">
<td class="cellalignment1578">
<pre>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td>
<td class="cellalignment1578">
<pre>
CREATE OR REPLACE PACKAGE hr_ctx_pkg 
   AS  
    PROCEDURE set_hr_ctx(sec_level IN VARCHAR2); 
    PROCEDURE clear_hr_context;
   END;  
  /
  CREATE OR REPLACE PACKAGE BODY hr_ctx_pkg 
   AS                                            
    PROCEDURE set_hr_ctx(sec_level IN VARCHAR2)      
    AS   
    BEGIN  
     DBMS_SESSION.SET_CONTEXT(  
      namespace  =&gt; 'global_hr_ctx', 
      attribute  =&gt; 'job_role', 
      value      =&gt; sec_level);
     END set_hr_ctx;
           
  PROCEDURE clear_hr_context  
    AS
    BEGIN  
     DBMS_SESSION.CLEAR_CONTEXT('global_hr_ctx', 'job_role'); 
    END clear_context;  
  END; 
 / 
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblsimple" --></div>
<!-- class="example" -->
<p>In this example:</p>
<ul>
<li>
<p><span class="bold">Lines 12&ndash;16:</span> Uses the <code>DBMS_SESSION.SET_CONTEXT</code> procedure to set values for the <code>namespace</code>, <code>attribute</code>, and <code>value</code> parameters. The <code>sec_level</code> value is specified when the database application runs the <code>hr_ctx_pkg.set_hr_ctx</code> procedure.</p>
<p>The <code>username</code> and <code>client_id</code> values are not set, hence, they are <code>NULL</code>. This enables all users (database users) to have access to the values, which is appropriate for server-wide settings.</p>
</li>
<li>
<p><span class="bold">Line 13:</span> In the <code>SET_CONTEXT</code> procedure, sets the <code>namespace</code> to <code>global_hr_ctx</code>.</p>
</li>
<li>
<p><span class="bold">Line 14:</span> Creates the <code>job_role</code> attribute.</p>
</li>
<li>
<p><span class="bold">Line 15:</span> Sets the value for the <code>job_role</code> attribute to <code>sec_level</code>.</p>
</li>
<li>
<p><span class="bold">Lines 18&ndash;24:</span> Creates the <code>clear_hr_context</code> procedure to clear the context values. See <a href="#CIHEIIGA">"Clearing Session Data When the Session Closes"</a> for more information.</p>
</li>
</ul>
<p>Typically, you execute this procedure within a database application. For example, if all users logging in are clerks, and you want to use "clerk" as a security level, you would embed a call within a database application similar to the following:</p>
<pre>
BEGIN
 hr_ctx_pkg.set_hr_ctx('clerk');
END;
/
</pre>
<p>If the procedure successfully completes, you can check the application context setting as follows:</p>
<pre>
SELECT SYS_CONTEXT('global_hr_ctx', 'job_role') job_role FROM DUAL;

JOB_ROLE
-----------
clerk
</pre>
<p>To clear this application context, enter the following:</p>
<pre>
BEGIN
 hr_ctx_pkg.clear_hr_context;
END;
/
</pre>
<p>To check that it is really cleared, the following <code>SELECT</code> statement should return no values:</p>
<pre>
SELECT SYS_CONTEXT('global_hr_ctx', 'job_role') job_role FROM DUAL;

JOB_ROLE
-----------
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
If Oracle Database returns error messages saying that you have insufficient privileges, ensure that you have correctly created the global application context. You should also query the <code>DBA_CONTEXT</code> database view to ensure that your settings are correct, for example, that you are calling the procedure from the schema in which you created it.
<p>If <code>NULL</code> is returned, then you may have inadvertently set a client identifier. To clear the client identifier, run the following procedure:</p>
<pre>
EXEC DBMS_SESSION.CLEAR_IDENTIFIER;
</pre></div>
</div>
<!-- class="sect3" -->
<a id="CIHGBBJC"></a>
<div id="DBSEG98192" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Setting a Global Context for Database Users Who Move Between Applications</h4>
<p><a id="sthref1250"></a>To<a id="sthref1251"></a> set a global application context for database users who move from one application to another, particularly when the applications have different access requirements, include the <code>username</code> parameter in the <code>SET_CONTEXT</code> procedure. This parameter specifies that the same schema be used for all sessions.</p>
<p>Use the following <code>SET_CONTEXT</code> parameters:</p>
<ul>
<li>
<p><code>namespace</code></p>
</li>
<li>
<p><code>attribute</code></p>
</li>
<li>
<p><code>value</code></p>
</li>
<li>
<p><code>username</code></p>
</li>
</ul>
<p>Oracle Database matches the <code>username</code> value so that the other application can recognize the application context. This enables the user to move between applications.</p>
<p>By omitting the <code>client_id</code> setting, its value is <code>NULL</code>, the default. This means that values can be seen by multiple sessions if the <code>username</code> setting is the same for a database user who maintains the same context in different applications. For example, you can have a suite of applications that control user access with Oracle Virtual Private Database policies, with each user restricted to a job role.</p>
<p><a href="#CIHCFCIH">Example 6-11</a> demonstrates how to set the <code>username</code> parameter so that a specific user can move between applications. This example is similar to the package that was created in <a href="#CIHCBBCI">Example 6-10</a>. The use of the <code>username</code> parameter is indicated in <span class="bold">bold</span> typeface.</p>
<div id="DBSEG98193" class="example">
<p class="titleinexample"><a id="CIHCFCIH"></a>Example 6-11 Package to Manage Global Application Context Values for a User Moving Between Applications</p>
<pre>
CREATE OR REPLACE PACKAGE hr_ctx_pkg
  AS
    PROCEDURE set_hr_ctx(sec_level IN VARCHAR2, <span class="bold">user_name IN VARCHAR2);</span>
    PROCEDURE clear_hr_context;
   END;
  /
  CREATE OR REPLACE PACKAGE BODY hr_ctx_pkg
   AS
    PROCEDURE set_hr_ctx(sec_level IN VARCHAR2, <span class="bold">user_name IN VARCHAR2)</span>
    AS
     BEGIN
      DBMS_SESSION.SET_CONTEXT(
       namespace  =&gt; 'global_hr_ctx',
       attribute  =&gt; 'job_role',
       value      =&gt; sec_level,
<span class="bold">       username   =&gt; user_name);</span>
      END set_hr_ctx;
 
   PROCEDURE clear_hr_context
    AS
     BEGIN
      DBMS_SESSION.CLEAR_CONTEXT('global_hr_ctx');
     END clear_context;
  END;
 / 
</pre></div>
<!-- class="example" -->
<p>Typically, you execute this procedure within a database application by embedding a call similar to the following example. Ensure that the value for the <code>user_name</code> parameter (<code>scott</code> in this case) is a valid database user name.</p>
<pre>
BEGIN
 hr_ctx_pkg.set_hr_ctx('clerk', 'scott');
END;
</pre>
<p>A secure way to manage this type of global application context is within your applications, embed code to grant a secure application role to the user. This code should include <code>EXECUTE</code> permissions on the trusted PL/SQL package that sets the application context. In other words, the application, not the user, will set the context for the user.</p>
</div>
<!-- class="sect3" -->
<a id="CIHEEJCD"></a>
<div id="DBSEG98194" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Setting a Global Application Context for Nondatabase Users</h4>
<p><a id="sthref1252"></a>When a nondatabase <a id="sthref1253"></a><a id="sthref1254"></a><a id="sthref1255"></a><a id="sthref1256"></a>user, <a id="sthref1257"></a>that is, a <a id="sthref1258"></a>user who is not known to the database (such as a Web application user), starts a client session, the application server generates a client session ID. Once this ID is set on the application server, it must be passed to the database server side. You do this by using the <code>DBMS_SESSION.SET_IDENTIFIER</code> procedure to set the client session ID. To set the context, you set the <code>client_id</code> parameter in the <code>DBMS_SESSION.SET_CONTEXT</code> procedure, in a PL/SQL procedure on the server side. This enables you to manage the application context globally, yet each client sees only his or her assigned application context.</p>
<p>The <code>client_id</code> value is the key here to getting and setting the correct attributes for the global application context. Remember that the client identifier is controlled by the middle-tier application, and once set, it remains open until it is cleared.</p>
<p>A typical way to manage this type of application context is to place the <code>session_id</code> value (<code>client_identifier</code>) in a cookie, and send it to the end user's HTML page so that is returned on the next request. A lookup table in the application should also keep client identifiers so that they are prevented from being reused for other users and to implement an end-user session time out.</p>
<p>For nondatabase users, configure the following <code>SET_CONTEXT</code> parameters:</p>
<ul>
<li>
<p><code>namespace</code></p>
</li>
<li>
<p><code>attribute</code></p>
</li>
<li>
<p><code>value</code></p>
</li>
<li>
<p><code>username</code></p>
</li>
<li>
<p><code>client_id</code></p>
</li>
</ul>
<p><a href="#CIHIEJHD">Example 6-12</a> <a id="sthref1259"></a>shows <a id="sthref1260"></a>how to create a package that manages this type of global application context.</p>
<div id="DBSEG98195" class="example">
<p class="titleinexample"><a id="CIHIEJHD"></a>Example 6-12 Package to Manage Global Application Context Values for Nondatabase Users</p>
<div class="inftblsimple">
<table class="cellalignment1579" title="hr_ctx_pkg2 example" summary="hr_ctx_pkg2 example, line numbers and code, listed left to right" dir="ltr">
<tbody>
<tr class="cellalignment1570">
<td class="cellalignment1578">
<pre>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td>
<td class="cellalignment1578">
<pre>
CREATE OR REPLACE PACKAGE hr_ctx_pkg  
  AS                         
   PROCEDURE set_session_id(session_id_p IN NUMBER); 
   PROCEDURE set_hr_ctx(sec_level_attr IN VARCHAR2,  
      sec_level_val IN VARCHAR2);    
   PROCEDURE clear_hr_session(session_id_p IN NUMBER); 
   PROCEDURE clear_hr_context;  
  END;     
/
  CREATE OR REPLACE PACKAGE BODY hr_ctx_pkg 
   AS                     
    session_id_global NUMBER;  
  PROCEDURE set_session_id(session_id_p IN NUMBER) 
   AS                     
   BEGIN   
    session_id_global := session_id_p; 
    DBMS_SESSION.SET_IDENTIFIER(session_id_p);
  END set_session_id; 
     
  PROCEDURE set_hr_ctx(sec_level_attr IN VARCHAR2,
     sec_level_val IN VARCHAR2) 
   AS     
   BEGIN      
    DBMS_SESSION.SET_CONTEXT(  
     namespace  =&gt; 'global_hr_ctx',  
     attribute  =&gt; sec_level_attr,
     value      =&gt; sec_level_val,
     username   =&gt; USER,
     client_id  =&gt; session_id_global); 
   END set_hr_ctx;  
        
  PROCEDURE clear_hr_session(session_id_p IN NUMBER)
   AS 
   BEGIN   
      DBMS_SESSION.SET_IDENTIFIER(session_id_p); 
      DBMS_SESSION.CLEAR_IDENTIFIER;  
   END clear_hr_session;   
   
  PROCEDURE clear_hr_context 
  AS       
  BEGIN            
   DBMS_SESSION.CLEAR_CONTEXT('global_hr_ctx', session_id_global);
  END clear_hr_context;  
 END;  
 /
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblsimple" --></div>
<!-- class="example" -->
<p>In this example:</p>
<ul>
<li>
<p><span class="bold">Line 12:</span> Creates the <code>session_id_global</code> variable, which will hold the client session ID. The <code>session_id_global</code> variable is referenced throughout the package definition, including the procedure that creates the global application context attributes and assigns them values. This means that the global application context values will always be associated with this particular session ID.</p>
</li>
<li>
<p><span class="bold">Lines 13&ndash;18:</span> Creates the <code>set_session_id</code> procedure, which writes the client session ID to the <code>session_id_global</code> variable.</p>
</li>
<li>
<p><span class="bold">Lines 20&ndash;30:</span> Creates the <code>set_hr_ctx</code> procedure, which creates global application context attributes and enables you to assign values to these attributes. Within this procedure:</p>
<ul>
<li>
<p><span class="bold">Line 28:</span> Specifies the <code>username</code> value. This example sets it by calling the Oracle Database-supplied <code>USER</code> function, which adds the session owner from the context retrieval process. The <code>USER</code> function ensures that only the user who set the application context can access the context. See <a class="olink SQLRF06156" href="../../server.111/b28286/functions215.htm#SQLRF06156"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about the <code>USER</code> function.</p>
<p>If you had specified <code>NULL</code> (the default for the <code>username</code> parameter), then any user can access the context.</p>
<p>Setting both the <code>username</code> and <code>client_id</code> values enables two scenarios. For lightweight users, set the <code>username</code> parameter to a connection pool owner (for example, <code>APPS_USER</code>), and then set <code>client_id</code> to the client session ID. If you want to use a stateless Web session, set the <code>user_name</code> parameter to the same database user who has logged in, and ensure that this user keeps the same client session ID. See <a href="#CIHDFGAC">"Setting the DBMS_SESSION.SET_CONTEXT username and client_id Parameters"</a> for an explanation of how different <code>username</code> and <code>client_id</code> settings work.</p>
</li>
<li>
<p><span class="bold">Line 29:</span> Specifies <code>client_id</code> value. This example sets it to the <code>session_id_global</code> variable. This associates the context settings defined here with a specific client session ID, that is, the one that is set when you run the <code>set_session_id</code> procedure. If you specify the <code>client_id</code> parameter default, <code>NULL</code>, then the global application context settings could be used by any session.</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">Lines 32&ndash;37:</span> Creates the <code>clear_hr_session</code> procedure to clear the client session identifier. <span class="bold">Line 33</span> sets it to ensure that you are clearing the correct session ID, that is, the one stored in variable session_id_p defined in <span class="bold">Line 10</span>.</p>
</li>
<li>
<p><span class="bold">Lines 39&ndash;44:</span> Creates the <code>clear_hr_context</code> procedure, so that you can clear the context settings for the current user session, which were defined by the <code>global_hr_ctx</code> variable. See <a href="#CIHEIIGA">"Clearing Session Data When the Session Closes"</a> for more information.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CIHIABHH">"Tutorial: Creating a Global Application Context That Uses a Client Session ID"</a> for a tutorial that demonstrates how a global application context used for client session IDs works</p>
</li>
<li>
<p><a href="#CIHJEIEH">"Setting the Client Session ID Using a Middle-Tier Application"</a></p>
</li>
<li>
<p><a href="authentication.htm#i1010372">"Using Client Identifiers to Identify Application Users Not Known to the Database"</a> for information about how client identifiers work on middle-tier systems</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="CIHEIIGA"></a>
<div id="DBSEG98196" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Clearing Session Data When the Session Closes</h4>
<p>The application <a id="sthref1261"></a>context exists entirely within memory. When the user exits a session, you need to clear the context for the <code>client_identifier</code> value. This releases memory and prevents other users from accidentally using any left over values.</p>
<p>To clear session data when a user exits a session, use either of the following methods in the server-side PL/SQL package:</p>
<ul>
<li>
<p><span class="bold">Clearing the client identifier when a user exits a session.</span> Use the <code>DBMS_SESSION.CLEAR_IDENTIFIER</code> procedure. For example:</p>
<pre>
DBMS_SESSION.CLEAR_IDENTIFIER;
</pre></li>
<li>
<p><span class="bold">Continuing the session but still clearing the context.</span> If you want the session to continue, but you still need to clear the context, use the <code>DBMS_SESSION.CLEAR_CONTEXT</code> or the <code>DBMS_SESSION.CLEAR_ALL_CONTEXT</code> procedure. For example:</p>
<pre>
DBMS_SESSION.CLEAR_CONTEXT('my_ctx', 'my_attribute');
</pre>
<p>The <code>CLEAR_CONTEXT</code> procedure clears the context for the current user. To clear the context values for all users, for example, when you need to shut down the application server, use the <code>CLEAR_ALL_CONTEXT</code> procedure.</p>
<p>Global application context values are available until they are cleared, so you should use <code>CLEAR_CONTEXT</code> or <code>CLEAR_ALL_CONTEXT</code> to ensure that other sessions do not have access to these values. Be aware that any changes in the context value are reflected immediately and subsequent calls to access the value through the <code>SYS_CONTEXT</code> function will return the most recent value.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHFDEBD"></a>
<div id="DBSEG70785" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Embedding Calls in Middle-Tier Applications to Manage the Client Session ID</h3>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CIHBAEBG">About Managing Client Session IDs Using a Middle-Tier Application</a></p>
</li>
<li>
<p><a href="#CIHGBEHG">Retrieving the Client Session ID Using a Middle-Tier Application</a></p>
</li>
<li>
<p><a href="#CIHJEIEH">Setting the Client Session ID Using a Middle-Tier Application</a></p>
</li>
<li>
<p><a href="#CIHDJAAA">Clearing Session Data Using a Middle-Tier Application</a></p>
</li>
</ul>
<a id="CIHBAEBG"></a>
<div id="DBSEG98197" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About Managing Client Session IDs Using a Middle-Tier Application</h4>
<p>The application server generates the client session ID. From a middle-tier application, you can get, set, and clear the client session IDs. To do so, embed either Oracle Call Interface (OCI) calls or <code>DBMS_SESSION</code> PL/SQL package procedures into the middle-tier application code.</p>
<p>The application authenticates the user, sets the client identifier, and sets it in the current session. The PL/SQL package <code>SET_CONTEXT</code> sets the <code>client_identifier</code> value in the application context. See <a href="#CIHEEJCD">"Setting a Global Application Context for Nondatabase Users"</a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHGBEHG"></a>
<div id="DBSEG77851" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Retrieving the Client Session ID Using a Middle-Tier Application</h4>
<p>When a user starts a client session, the application server generates a client session ID. To retrieve this client ID, you can use the <code>OCIStmtExecute</code> call with any of the following statements:</p>
<pre>
SELECT SYS_CONTEXT('userenv', 'client_identifier') FROM dual;

SELECT CLIENT_IDENTIFIER from V$SESSION;

SELECT value FROM session_context WHERE attribute='CLIENT_IDENTIFIER';
</pre>
<p><a href="#CIHCHABC">Example 6-13</a> shows how to use the <code>OCIStmtExecute</code> call to retrieve a client session ID value.</p>
<div id="DBSEG98198" class="example">
<p class="titleinexample"><a id="CIHCHABC"></a>Example 6-13 Using OCIStmtExecute to Retrieve a Client Session ID Value</p>
<div class="inftblsimple">
<table class="cellalignment1579" title="OCIStmtExecute example" summary="OCIStmtExecute example, line numbers and code, listed left to right" dir="ltr">
<tbody>
<tr class="cellalignment1570">
<td class="cellalignment1578">
<pre>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td>
<td class="cellalignment1578">
<pre>
oratext    clientid[31]; 
 OCIDefine  *defnp1 = (OCIDefine *) 0; 
 OCIStmt    *statementhndle; 
 oratext    *selcid = (oratext *)"SELECT SYS_CONTEXT('userenv', 
             'client_identifier') FROM  DUAL"; 
 
 OCIStmtPrepare(statementhndle, errhp, selcid, 
  (ub4) strlen((char *) selcid), (ub4) OCI_NTV_SYNTAX, (ub4) OCI_DEFAULT);
 
OCIDefineByPos(statementhndle, &amp;defnp1, errhp, 1, (dvoid *)clientid, 31, 
  SQLT_STR, (dvoid *) 0, (ub2 *) 0, (ub2 *) 0, OCI_DEFAULT);
 
OCIStmtExecute(servhndle, statementhndle, errhp, (ub4) 1, (ub4) 0,
  (CONST OCISnapshot *) NULL, (OCISnapshot *) NULL, OCI_DEFAULT); 
 
printf("CLIENT_IDENTIFIER = %s \n", clientid);
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblsimple" --></div>
<!-- class="example" -->
<p>In this example:</p>
<ul>
<li>
<p><span class="bold">Lines 1&ndash;5:</span> Create variables to store the client session ID, reference call for <code>OCIDefine</code>, the statement handle, and the <code>SELECT</code> statement to use.</p>
</li>
<li>
<p><span class="bold">Lines 7&ndash;8:</span> Prepare the statement <code>selcid</code> for execution.</p>
</li>
<li>
<p><span class="bold">Lines 10&ndash;11:</span> Define the output variable <code>clientid</code> for client session ID.</p>
</li>
<li>
<p><span class="bold">Lines 13&ndash;14:</span> Execute the statement in the <code>selcid</code> variable.</p>
</li>
<li>
<p><span class="bold">Line 16:</span> Prints the formatted output for the retrieved client session ID.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CIHJEIEH"></a>
<div id="DBSEG98199" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Setting the Client Session ID Using a Middle-Tier Application</h4>
<p>After you use the <code>OCIStmtExecute</code> call to retrieve the client session ID, you are ready to set this ID. The <code>DBMS_SESSION.SET_CONTEXT</code> procedure in the server-side PL/SQL package then sets this session ID and optionally, overwrites the application context values.</p>
<p>Ensure that the middle-tier application code checks that the client session ID value (for example, the value written to <code>user_id</code> in the previous examples) matches the <code>client_id</code> setting defined in the server-side <code>DBMS_SESSION.SET_CONTEXT</code> procedure. The sequence of calls on the application server side should be as follows:</p>
<ol>
<li>
<p><span class="bold">Get the current client session ID.</span> The session should already have this ID, but it is safer to ensure that it truly has the correct value.</p>
</li>
<li>
<p><span class="bold">Clear the current client session ID.</span> This prepares the application to service a request from a different end user.</p>
</li>
<li>
<p><span class="bold">Set the new client session ID or the client session ID that has been assigned to the end user.</span> This ensures that the session is using a different set of global application context values.</p>
</li>
</ol>
<p>You can use the following methods to set the client session ID on the application server side:</p>
<ul>
<li>
<p><span class="bold">Oracle Call Interface.</span> Set the <code>OCI_ATTR_CLIENT_IDENTIFIER</code> attribute in an <code>OCIAttrSet</code> OCI call. This attribute sets the client identifier in the session handle to track the end user identity.</p>
<p>The following example shows how to use <code>OCIAttrSet</code> with the <code>ATTR_CLIENT_IDENTIFIER</code> parameter. The <code>user_id</code> setting refers to a variable that stores the ID of the user who is logging on.</p>
<pre>
OCIAttrSet((void *)session_handle, (ub4) OCI_HTYPE_SESSION, 
           (void *) user_id, (ub4)strlen(user_id),
           OCI_ATTR_CLIENT_IDENTIFIER, error_handle);
</pre></li>
<li>
<p><span class="bold">DBMS_SESSION package.</span> Use the <code>DBMS_SESSION.SET_IDENTIFIER</code> procedure to set the client identifier for the global application context. For example, assuming you are storing the ID of the user logging on in a variable called <code>user_id</code>, you would enter the following line into the middle-tier application code:</p>
<pre>
DBMS_SESSION.SET_IDENTIFIER(user_id);
</pre></li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
When the application generates a session ID for use as a <code>CLIENT_IDENTIFIER</code>, then the session ID must be suitably random and protected over the network by encryption. If the session ID is not random, then a <a id="sthref1262"></a>malicious user could guess the session ID and access the data of another user. If the session ID is not encrypted over the network, then a malicious user could retrieve the session ID and access the connection.
<p>You can encrypt the session ID by using Oracle Advanced Security. See <a class="olink ASOAG010" href="http://www.oracle.com/pls/topic/lookup?ctx=db111&amp;id=ASOAG010"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for more information. To learn more about encrypting data over a network, see <a class="olink TDPSG40045" href="../../server.111/b28337/tdpsg_network_secure.htm#TDPSG40045"><span class="italic">Oracle Database 2 Day + Security Guide</span></a>.</p>
</div>
<p>For both <code>OCIAttrSet</code> and <code>DBMS_SESSION.SET_IDENTIFIER</code>, you can check the value of this identifier as follows:</p>
<pre>
SELECT SYS_CONTEXT('userenv', 'client_identifier') FROM dual;
</pre>
<p>Another way to check this value is to query the <code>V$SESSION</code> view:</p>
<pre>
SELECT CLIENT_IDENTIFIER from V$SESSION;
</pre></div>
<!-- class="sect3" -->
<a id="CIHDJAAA"></a>
<div id="DBSEG98200" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Clearing Session Data Using a Middle-Tier Application</h4>
<p>The application context exists entirely within memory. When the user exits a session, you need to clear the context for the <code>client_identifier</code> value. This releases memory and prevents other users from accidentally using any left over values</p>
<p>To clear session data when a user exits a session, use either of the following methods in the middle-tier application code:</p>
<ul>
<li>
<p><span class="bold">Clearing the client identifier when a user exits a session.</span> Use the <code>DBMS_SESSION.CLEAR_IDENTIFIER</code> procedure. For example:</p>
<pre>
DBMS_SESSION.CLEAR_IDENTIFIER;
</pre></li>
<li>
<p><span class="bold">Continuing the session but still clearing the context.</span> If you want the session to continue, but you still need to clear the context, use the <code>DBMS_SESSION.CLEAR_CONTEXT</code> or the <code>DBMS_SESSION.CLEAR_ALL_CONTEXT</code> procedure. For example:</p>
<pre>
DBMS_SESSION.CLEAR_CONTEXT(<span class="italic">namespace</span>, <span class="italic">client_identifier</span>, <span class="italic">attribute</span>);
</pre>
<p>The <code>CLEAR_CONTEXT</code> procedure clears the context for the current user. To clear the context values for all users, for example, when you need to shut down the application server, use the <code>CLEAR_ALL_CONTEXT</code> procedure.</p>
<p>Global application context values are available until they are cleared, so you should use <code>CLEAR_CONTEXT</code> or <code>CLEAR_ALL_CONTEXT</code> to ensure that other sessions do not have access to these values.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHIABHH"></a>
<div id="DBSEG79745" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Tutorial: Creating a Global Application Context That Uses a Client Session ID</h3>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BABFBHCG">About This Tutorial</a></p>
</li>
<li>
<p><a href="#CIHEGJEA">Step 1: Create User Accounts</a></p>
</li>
<li>
<p><a href="#CIHCHEAD">Step 2: Create the Global Application Context</a></p>
</li>
<li>
<p><a href="#CIHDCFJA">Step 3: Create a Package for the Global Application Context</a></p>
</li>
<li>
<p><a href="#CIHFDGEA">Step 4: Test the Global Application Context</a></p>
</li>
<li>
<p><a href="#CIHDFHHB">Step 5: Remove the Components for This Tutorial</a></p>
</li>
</ul>
<a id="BABFBHCG"></a>
<div id="DBSEG98510" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About This Tutorial</h4>
<p><a id="sthref1263"></a>This <a id="sthref1264"></a>tutorial <a id="sthref1265"></a>shows<a id="sthref1266"></a><a id="sthref1267"></a> how to create a global application context that uses a client session ID for a lightweight user application. It demonstrates how to control nondatabase user access by using a connection pool.</p>
</div>
<!-- class="sect3" -->
<a id="CIHEGJEA"></a>
<div id="DBSEG98201" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 1: Create User Accounts</h4>
<p>You must create two users for this example: a security administrator who will manage the application context and its package, and a user account that owns the connection pool.</p>
<p>In this tutorial:</p>
<ol>
<li>
<p>Log on to SQL*Plus as <code>SYS</code> and connect using <code>AS SYSDBA</code>.</p>
<pre>
sqlplus sys as sysdba
Enter password: <span class="italic">password</span>
</pre></li>
<li>
<p>Create the <code>sysadmin_ctx</code> account, who will administer the global application context.</p>
<pre>
GRANT CREATE SESSION, CREATE ANY CONTEXT, CREATE PROCEDURE TO sysadmin_ctx IDENTIFIED BY <span class="italic">password</span>;

GRANT EXECUTE ON DBMS_SESSION TO sysadmin_ctx;
</pre>
<p>Replace <code><span class="codeinlineitalic">password</span></code> with a password that is secure. See <a href="authentication.htm#CHDFDHAJ">"Minimum Requirements for Passwords"</a> for more information.</p>
</li>
<li>
<p>Create the database account <code>apps_user</code>, who will own the connection pool.</p>
<pre>
GRANT CREATE SESSION TO apps_user IDENTIFIED BY <span class="italic">password</span>;
</pre>
<p>Replace <code><span class="codeinlineitalic">password</span></code> with a password that is secure. See <a href="authentication.htm#CHDFDHAJ">"Minimum Requirements for Passwords"</a> for more information.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CIHCHEAD"></a>
<div id="DBSEG98202" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 2: Create the Global Application Context</h4>
<ol>
<li>
<p>Log on as the security administrator <code>sysadmin_ctx</code>.</p>
<pre>
CONNECT sysadmin_ctx
Enter password: <span class="italic">password</span>
</pre></li>
<li>
<p>Create the <code>cust_ctx</code> global application context.</p>
<pre>
CREATE CONTEXT global_cust_ctx USING cust_ctx_pkg ACCESSED GLOBALLY;
</pre>
<p>The <code>cust_ctx</code> context is created and associated with the schema of the security administrator <code>sysadmin_ctx</code>. However, the <code>SYS</code> schema owns the application context.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CIHDCFJA"></a>
<div id="DBSEG98203" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 3: Create a Package for the Global Application Context</h4>
<ol>
<li>
<p>As <code>sysadmin_ctx</code>, create the following PL/SQL package:</p>
<pre>
CREATE OR REPLACE PACKAGE cust_ctx_pkg
  AS
   PROCEDURE set_session_id(session_id_p IN NUMBER); 
   PROCEDURE set_cust_ctx(sec_level_attr IN VARCHAR2, 
     sec_level_val IN VARCHAR2);
   PROCEDURE clear_hr_session(session_id_p IN NUMBER);
   PROCEDURE clear_hr_context;
  END;
 /
CREATE OR REPLACE PACKAGE BODY cust_ctx_pkg
  AS
  session_id_global NUMBER;
 
 PROCEDURE set_session_id(session_id_p IN NUMBER) 
  AS
  BEGIN
   session_id_global := session_id_p;
   DBMS_SESSION.SET_IDENTIFIER(session_id_p);
 END set_session_id;
 
 PROCEDURE set_cust_ctx(sec_level_attr IN VARCHAR2, sec_level_val IN VARCHAR2)
  AS
  BEGIN
   DBMS_SESSION.SET_CONTEXT(
    namespace  =&gt; 'global_cust_ctx',
    attribute  =&gt; sec_level_attr,
    value      =&gt; sec_level_val,
    username   =&gt; USER, <span class="italic">-- Retrieves the session user, in this case, apps_user</span>
    client_id  =&gt; session_id_global);
  END set_cust_ctx;
 
  PROCEDURE clear_hr_session(session_id_p IN NUMBER)
   AS
   BEGIN
     DBMS_SESSION.SET_IDENTIFIER(session_id_p);
     DBMS_SESSION.CLEAR_IDENTIFIER;
   END clear_hr_session;

 PROCEDURE clear_hr_context
  AS
  BEGIN
   DBMS_SESSION.CLEAR_CONTEXT('global_cust_ctx', session_id_global);
  END clear_hr_context;
 END;
/
</pre>
<p>For a detailed explanation of how this type of package works, see <a href="#CIHIEJHD">Example 6-12</a>.</p>
</li>
<li>
<p>Grant <code>EXECUTE</code> privileges on the <code>cust_ctx_pkg</code> package to the connection pool owner, <code>apps_user</code>.</p>
<pre>
GRANT EXECUTE ON cust_ctx_pkg TO apps_user;
</pre></li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CIHFDGEA"></a>
<div id="DBSEG98204" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 4: Test the Global Application Context</h4>
<p>At this stage, you are ready to explore how this global application context and session ID settings work.</p>
<ol>
<li>
<p>Log on to SQL*Plus as the connection pool owner, user <code>apps_user</code>.</p>
<pre>
CONNECT apps_user
Enter password: <span class="italic">password</span>
</pre></li>
<li id="CIHIGCDB">
<p>When the connection pool user logs on, the application sets the client session identifier as follows:</p>
<pre>
BEGIN
 sysadmin_ctx.cust_ctx_pkg.set_session_id(34256);
END;
/
</pre>
<p>You can test and check the value of the client session identifier as follows:</p>
<ol>
<li>
<p>Log in as the connection pool user <code>apps_user</code>.</p>
</li>
<li>
<p>Set the session ID:</p>
<pre>
EXEC sysadmin_ctx.cust_ctx_pkg.set_session_id(34256);
</pre></li>
<li>
<p>Check the session ID:</p>
<pre>
SELECT SYS_CONTEXT('userenv', 'client_identifier') FROM dual;
</pre>
<p>The following output should appear:</p>
<pre>
SYS_CONTEXT('USERENV','CLIENT_IDENTIFIER')
--------------------------------------------------
34256
</pre></li>
</ol>
</li>
<li>
<p>As user <code>apps_user</code>, set the global application context as follows:</p>
<pre>
EXEC sysadmin_ctx.cust_ctx_pkg.set_cust_ctx('Category', 'Gold Partner');
EXEC sysadmin_ctx.cust_ctx_pkg.set_cust_ctx('Benefit Level', 'Highest');
</pre>
<p>(In a real-world scenario, the middle-tier application would set the global application context values, similar to how the client session identifier was set in Step <a href="#CIHIGCDB">2</a>.)</p>
</li>
<li id="CIHBHECD">
<p>Enter the following <code>SELECT SYS_CONTEXT</code> statement to check that the settings were successful:</p>
<pre>
col category format a13
col benefit_level format a14

SELECT SYS_CONTEXT('global_cust_ctx', 'Category') category, SYS_CONTEXT('global_cust_ctx', 'Benefit Level') benefit_level FROM dual;
</pre>
<p>The following output should appear:</p>
<pre>
CATEGORY       BENEFIT_LEVEL
-------------  --------------
Gold Partner   Highest
</pre></li>
</ol>
<p>What <code>apps_user</code> has done here, within the client session 34256, is set a global application context on behalf of a nondatabase user. This context sets the <code>Category</code> and <code>Benefit Level</code> <code>DBMS_SESSION.SET_CONTEXT attributes</code> to be <code>Gold Partner</code> and <code>Highest</code>, respectively. The context exists only for user <code>apps_user</code> with client ID 34256. When a nondatabase user logs in, behind the scenes, he or she is really logging on as the connection pool user <code>apps_user</code>. Hence, the <code>Gold Partner</code> and <code>Highest</code> context values are available to the nondatabase user.</p>
<p>Suppose the user had been a database user and could log in without using the intended application. (For example, the user logs in using SQL*Plus.) Because the user has not logged in through the connection pool user <code>apps_user</code>, the global application context appears empty to our errant user. This is because the context was created and set under the <code>apps_user</code> session. If the user runs the <code>SELECT SYS_CONTEXT</code> statement, the following output appears:</p>
<pre>
CATEGORY       BENEFIT_LEVEL
-------------  --------------
</pre>
<p>Next, try the following test:</p>
<ol>
<li>
<p>As user <code>apps_user</code>, clear the session ID.</p>
<pre>
EXEC sysadmin_ctx.cust_ctx_pkg.clear_hr_session(34256);
</pre></li>
<li>
<p>Check the global application context settings again.</p>
<pre>
SELECT SYS_CONTEXT('global_cust_ctx', 'Category') category, SYS_CONTEXT('global_cust_ctx', 'Benefit Level') benefit_level FROM dual;

CATEGORY       BENEFIT_LEVEL
-------------  --------------
</pre>
<p>Because <code>apps_user</code> has cleared the session ID, the global application context settings are no longer available.</p>
</li>
<li>
<p>Restore the session ID to 34256, and then check the context values.</p>
<pre>
EXEC sysadmin_ctx.cust_ctx_pkg.set_session_id(34256);

SELECT SYS_CONTEXT('global_cust_ctx', 'Category') category, SYS_CONTEXT('global_cust_ctx', 'Benefit Level') benefit_level FROM dual;
</pre>
<p>The following output should appear:</p>
<pre>
CATEGORY       BENEFIT_LEVEL
-------------  --------------
Gold Partner   Highest
</pre>
<p>As you can see, resetting the session ID to 34256 brings the application context values back again. To summarize, the global application context must be set only <span class="italic">once</span> for this user, but the client session ID must be set <span class="italic">each time</span> the user logs on.</p>
</li>
<li>
<p>Now try clearing and then checking the global application context values.</p>
<pre>
EXEC sysadmin_ctx.cust_ctx_pkg.clear_hr_context;

SELECT SYS_CONTEXT('global_cust_ctx', 'Category') category, SYS_CONTEXT('global_cust_ctx', 'Benefit Level') benefit_level FROM dual;
</pre>
<p>The following output should appear:</p>
<pre>
CATEGORY       BENEFIT_LEVEL
-------------  --------------
</pre>
<p>At this stage, the client session ID, 34256 is still in place, but the application context settings no longer exist. This enables you to continue the session for this user but without using the previously set application context values.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CIHDFHHB"></a>
<div id="DBSEG98205" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 5: Remove the Components for This Tutorial</h4>
<ol>
<li>
<p>Log on as <code>SYS</code> and connect using <code>AS SYSDBA</code>.</p>
<pre>
CONNECT sys/as sysdba
Enter password: <span class="italic">password</span>
</pre></li>
<li>
<p>Drop the global application context.</p>
<pre>
DROP CONTEXT global_cust_ctx;
</pre>
<p>Remember that even though <code>sysadmin_ctx</code> created the global application context, it is owned by the <code>SYS</code> schema.</p>
</li>
<li>
<p>Drop the two sample users.</p>
<pre>
DROP USER sysadmin_ctx CASCADE;
DROP USER apps_user;
</pre></li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1008653"></a>
<div id="DBSEG98206" class="sect2">
<h3 class="sect2">Global Application Context Processes</h3>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#i1006831">Simple Global Application Context Process</a></p>
</li>
<li>
<p><a href="#i1006852">Global Application Context Process for Lightweight Users</a></p>
</li>
</ul>
<a id="i1006831"></a>
<div id="DBSEG98207" class="sect3">
<h4 class="sect3">Simple Global Application Context Process</h4>
<p>Consider<a id="sthref1268"></a> the application server, <code>AppSvr</code>, that has assigned the client identifier <code>12345</code> to client <code>SCOTT</code>. The <code>AppSvr</code> application uses the <code>SCOTT</code> user to create a session (that is, it is not a connection pool.) The value assigned to the context attribute can come from anywhere, for example, from running a <code>SELECT</code> statement on a table that holds the responsibility codes for users. When the application context is populated, it is stored in memory. As a result, any action that needs the responsibility code can access it quickly with <code>SYS_CONTEXT</code> call, without the overhead of accessing a table. The only advantage of a global context over a local context in this case is if <code>SCOTT</code> were changing applications frequently and used the same context in each application.</p>
<p>The following steps show how the global application context process sets the client identifier for <code>SCOTT</code>:</p>
<ol>
<li>
<p>The administrator creates a global context namespace by using the following statement:</p>
<pre>
CREATE OR REPLACE CONTEXT hr_ctx USING hr.init ACCESSED GLOBALLY;
</pre></li>
<li>
<p>The administrator creates a PL/SQL package for the <code>hr_ctx</code> application context to indicate that, for this client identifier, there is an application context called <code>responsibility</code> with a value of <code>13</code> in the <code>HR</code> namespace.:</p>
<pre>
CREATE OR REPLACE PROCEDURE hr.init 
 AS
 BEGIN
  DBMS_SESSION.SET_CONTEXT(
    namespace =&gt; 'hr_ctx', 
    attribute =&gt; 'responsibility', 
    value     =&gt; '13', 
    username  =&gt; 'SCOTT', 
    client_id =&gt; '12345' );
 END;
/
</pre>
<p>This PL/SQL procedure is stored in the <code>HR</code> database schema, but typically it is stored in the schema of the security administrator.</p>
</li>
<li>
<p>The AppSvr application issues the following command to indicate the connecting client identity each time <code>scott</code> uses <code>AppSvr</code> to connect to the database:</p>
<pre>
EXEC DBMS_SESSION.SET_IDENTIFIER('12345');
</pre></li>
<li>
<p>When there is a <code>SYS_CONTEXT('hr_ctx','responsibility')</code> call within the database session, the database matches the client identifier, <code>12345</code>, to the global context, and then returns the value <code>13</code>.</p>
</li>
<li>
<p>When exiting this database session, <code>AppSvr</code> clears the client identifier by issuing the following procedure:</p>
<pre>
EXEC DBMS_SESSION.CLEAR_IDENTIFIER( );
</pre></li>
<li>
<p>To release the memory used by the application context, <code>AppSvr</code> issues the following procedure:</p>
<pre>
DBMS_SESSION.CLEAR_CONTEXT('hr_ctx', '12345');
</pre>
<p><code>CLEAR_CONTEXT</code> is needed when the user session is no longer active, either on an explicit logout, timeout, or other conditions determined by the <code>AppSvr</code> application.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
After a client identifier in a session is cleared, it becomes a <code>NULL</code> value. This implies that subsequent <code>SYS_CONTEXT</code> calls only retrieve application contexts with <code>NULL</code> client identifiers, until the client identifier is set again using the <code>SET_IDENTIFIER</code> interface.</div>
</div>
<!-- class="sect3" -->
<a id="i1006852"></a>
<div id="DBSEG98208" class="sect3">
<h4 class="sect3">Global Application Context Process for Lightweight Users</h4>
<p><a id="sthref1269"></a>The following steps show the global application context process for a lightweight user application. The lightweight user, <code>robert</code>, is not known to the database through the application.</p>
<ol>
<li>
<p>The administrator creates the global context namespace by using the following statement:</p>
<pre>
CREATE CONTEXT hr_ctx USING hr.init ACCESSED GLOBALLY;
</pre></li>
<li>
<p>The <code>HR</code> application server, <code>AppSvr</code>, starts and then establishes multiple connections to the <code>HR</code> database as the <code>appsmgr</code> user.</p>
</li>
<li>
<p>User <code>robert</code> logs in to the <code>HR</code> application server.</p>
</li>
<li>
<p><code>AppSvr</code> authenticates <code>robert</code> to the application.</p>
</li>
<li>
<p><code>AppSvr</code> assigns a temporary session ID (or uses the application user ID), <code>12345</code>, for this connection.</p>
</li>
<li>
<p>The session ID is returned to the Web browser used by <code>robert</code> as part of a cookie or is maintained by <code>AppSvr</code>.</p>
</li>
<li>
<p><code>AppSvr</code> initializes the application context for this client by calling the <code>hr.init</code> package, which issues the following statements:</p>
<pre>
DBMS_SESSION.SET_CONTEXT( 'hr_ctx', 'id', 'robert', 'APPSMGR', 12345 );
DBMS_SESSION.SET_CONTEXT( 'hr_ctx', 'dept', 'sales', 'APPSMGR', 12345 );
</pre></li>
<li>
<p><code>AppSvr</code> assigns a database connection to this session and initializes the session by issuing the following statement:</p>
<pre>
DBMS_SESSION.SET_IDENTIFIER( 12345 );
</pre></li>
<li>
<p>All <code>SYS_CONTEXT</code> calls within this database session return application context values that belong only to the client session.</p>
<p>For example, <code>SYS_CONTEXT('hr','id')</code> returns the value <code>robert</code>.</p>
</li>
<li>
<p>When finished with the session, <code>AppSvr</code> issues the following statement to clean up the client identity:</p>
<pre>
DBMS_SESSION.CLEAR_IDENTIFIER ( );
</pre></li>
</ol>
<p>Even if another user logged in to the database, this user cannot access the global context set by <code>AppSvr</code>, because <code>AppSvr</code> specified that only the application with user <code>APPSMGR</code> logged in can see it. If <code>AppSvr</code> used the following, then any user session with client ID set to <code>12345</code> can see the global context:</p>
<pre>
DBMS_SESSION.SET_CONTEXT( 'hr_ctx', 'id', 'robert', NULL , 12345 );
DBMS_SESSION.SET_CONTEXT( 'hr_ctx', 'dept', 'sales', NULL , 12345 );
</pre>
<p>Setting <code>USERNAME</code> to <code>NULL</code> enables different users to share the same context.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Be aware of the security implication of different settings of the global context. <code>NULL</code> in the user name means that any user can access the global context. A <code>NULL</code> client ID in the global context means that a session with an uninitialized client ID can access the global context. To ensure that only the user who has logged on can access the session, specify <code>USER</code> instead of <code>NULL</code>.</div>
<p>You can query the client identifier set in the session as follows:</p>
<pre>
SELECT SYS_CONTEXT('USERENV','CLIENT_IDENTIFIER') FROM dual;
</pre>
<p>The following output should appear:</p>
<pre>
SYS_CONTEXT('USERENV','CLIENT_IDENTIFIER')
-------------------------------------------------
12345
</pre>
<p>A security administrator can see which sessions have the client identifier set by querying the <code>V$SESSION</code> view for the <code>CLIENT_IDENTIFIER</code> and <code>USERNAME</code>, for example:</p>
<pre>
COL client_identifier format a18
SELECT CLIENT_IDENTIFIER, USERNAME FROM V$SESSION;
</pre>
<p>The following output should appear:</p>
<pre>
CLIENT_IDENTIFIER   USERNAME
------------------  --------
12345               APPSMGR
</pre>
<p>To check the amount of global context area (in bytes) being used, you can run the following query:</p>
<pre>
SELECT SYS_CONTEXT('USERENV','GLOBAL_CONTEXT_MEMORY') FROM dual;
</pre>
<p>The following output should appear:</p>
<pre>
SYS_CONTEXT('USERENV','GLOBAL_CONTEXT_MEMORY')
----------------------------------------------
584
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For more information about using the <code>CLIENT_IDENTIFIER</code> predefined attribute of the <code>USERENV</code> application context:
<ul>
<li>
<p><a href="authentication.htm#i1009003">"Using the CLIENT_IDENTIFIER Attribute to Preserve User Identity"</a></p>
</li>
<li>
<p><a class="olink SQLRF06157" href="../../server.111/b28286/functions216.htm#SQLRF06157"><span class="italic">Oracle Database SQL Language Reference</span></a></p>
</li>
<li>
<p><a class="olink LNOCI080" href="http://www.oracle.com/pls/topic/lookup?ctx=db111&amp;id=LNOCI080"><span class="italic">Oracle Call Interface Programmer's Guide</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDIFCFF"></a>
<div id="DBSEG70748" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using Client Session-Based Application Contexts</h2>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CIHFCFDD">About Client Session-Based Application Contexts</a></p>
</li>
<li>
<p><a href="#CHDEDADE">Setting a Value in the CLIENTCONTEXT Namespace</a></p>
</li>
<li>
<p><a href="#CIHCFDJG">Retrieving the Client Session ID</a></p>
</li>
<li>
<p><a href="#CHDBGGCH">Clearing a Setting in the CLIENTCONTEXT Namespace</a></p>
</li>
<li>
<p><a href="#CHDEDEFH">Clearing All Settings in the CLIENTCONTEXT Namespace</a></p>
</li>
</ul>
<a id="CIHFCFDD"></a>
<div id="DBSEG98209" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Client Session-Based Application Contexts</h3>
<p>In a <a id="sthref1270"></a>client <a id="ABC17785316"></a>session-based application context, you use <a id="sthref1271"></a>Oracle Call Interface (OCI) functions to set and clear user session information, which is then stored in the User Global Area (UGA).</p>
<p>The advantage of this type of application context is that an individual application can check for specific nondatabase user session data, rather than having the database perform this task. Another advantage is that the calls to set the application context value are included in the next call to the server, which improves performance.</p>
<p>However, be aware that application context security is compromised with a client session-based application context: any application user can set the client application context, and no check is performed in the database.</p>
<p>You configure the client session-based application context for the client application only. You do not configure any settings on the database server to which the client connects. Any application context settings in the database server do not affect the client session-based application context.</p>
<p>To configure a client session-based application context, use the <code>OCIAppCtxSet</code> OCI function. A client session-based application context uses the <code>CLIENTCONTEXT</code> namespace, updatable by any OCI client or by the existing <code>DBMS_SESSION</code> package for application context. Oracle Database performs no privilege or package security checks for this type.</p>
<p>The <code>CLIENTCONTEXT</code> namespace enables a single application transaction to both change the user context information and use the same user session handle to service the new user request. You can set or clear individual values for attributes in the <code>CLIENTCONTEXT</code> namespace, or clear all their values.</p>
<ul>
<li>
<p>An OCI client uses the <code>OCIAppCtx</code> function to set variable length data for the namespace, called <code>OCISessionHandle</code>. The OCI network single, round-trip transport sends all the information to the server in one round-trip. On the server side, you can query the application context information by using the <code>SYS_CONTEXT</code> SQL function on the namespace. For example:</p>
</li>
<li>
<p>A JDBC client uses the <code>oracle.jdbc.internal.OracleConnection</code> function to achieve the same purposes.</p>
</li>
</ul>
<p>Any user can set, clear, or collect the information in the <code>CLIENTCONTEXT</code> namespace, because it is not protected by package-based security.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNOCI3605" href="http://www.oracle.com/pls/topic/lookup?ctx=db111&amp;id=LNOCI3605"><span class="italic">Oracle Call Interface Programmer's Guide</span></a> for more information about client application contexts</div>
</div>
<!-- class="sect2" -->
<a id="CHDEDADE"></a>
<div id="DBSEG60025" class="sect2">
<h3 class="sect2">Setting a Value in the CLIENTCONTEXT Namespace</h3>
<p>To <a id="sthref1272"></a>retrieve the <code>CLIENTCONTEXT</code> namespace, you can use the Oracle Call Interface <code>OCIStmtExecute</code> call with either of the following statements:</p>
<pre>
err = OCIAppCtxSet((void *) <span class="italic">session_handle</span>,(dvoid *)"CLIENTCONTEXT",(ub4) 13,
                   (dvoid *)<span class="italic">attribute_name</span>, <span class="italic">length_of_attribute_name</span> 
                   (dvoid *)<span class="italic">attribute_value</span>, <span class="italic">length_of_attribute_value</span>, errhp,
                   OCI_DEFAULT);
</pre>
<p>In this specification:</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">session_handle</span></code>: Represents the <code>OCISessionHandle</code> namespace.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">attribute_name</span></code>: Name of attribute. For example, <code>responsibility</code>, with a length of <code>14</code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">attribute_value</span></code>: Value of attribute. For example, <code>manager</code>, with a length of <code>7</code>.</p>
</li>
</ul>
<p>For JDBC, use a command of the following form:</p>
<pre>
public void setApplicationContext(
  string CLIENTCONTEXT, 
  string <span class="italic">attribute</span>, 
  string <span class="italic">value</span>) 
throws SQLException; 
</pre>
<p>In this specification:</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">attribute</span></code>: Represents the attribute whose value must be set.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">value</span></code>: Represents the value to be assigned to the attribute.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
"Managing Scalable Platforms" in <a class="olink LNOCI080" href="http://www.oracle.com/pls/topic/lookup?ctx=db111&amp;id=LNOCI080"><span class="italic">Oracle Call Interface Programmer's Guide</span></a> for details about the <code>OCIAppCtx</code> function</div>
</div>
<!-- class="sect2" -->
<a id="CIHCFDJG"></a>
<div id="DBSEG97851" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Retrieving the Client Session ID</h3>
<p><a id="sthref1273"></a>To retrieve the client session ID, you can use the <code>OCIStmtExecute</code> call with either of the following statements:</p>
<pre>
SELECT SYS_CONTEXT('CLIENTCONTEXT', '<span class="italic">Attribute-1</span>') FROM dual;

SELECT VALUE FROM SESSION_CONTEXT 
WHERE NAMESPACE='CLIENTCONTEXT' AND ATTRIBUTE='<span class="italic">attribute-1</span>';
</pre>
<p>The <code><span class="codeinlineitalic">Attribute-1</span></code> value can be any attribute value that has already been set in the <code>CLIENTCONTEXT</code> namespace. Oracle Database only retrieves the set attribute; otherwise, it returns <code>NULL</code>. Typically, you set the attribute by using the <code>OCIAppCtxSet</code> call. In addition, you can embed a <code>DBMS_SESSION.SET_CONTEXT</code> call in the OCI code to set the attribute value.</p>
<p><a href="#CIHCHABC">Example 6-13</a> shows how to use the <code>OCIStmtExecute</code> call to retrieve a client session ID value.</p>
<div id="DBSEG98210" class="example">
<p class="titleinexample"><a id="sthref1274"></a>Example 6-14 Retrieving a Client Session ID Value for Client Session-Based Contexts</p>
<div class="inftblsimple">
<table class="cellalignment1579" title="OCI example 2," summary="OCI example 2, line numbers and code, listed left to right" dir="ltr">
<tbody>
<tr class="cellalignment1570">
<td class="cellalignment1578">
<pre>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td>
<td class="cellalignment1578">
<pre>
oratext    clientid[31];
OCIDefine  *defnp1 = (OCIDefine *) 0;
OCIStmt    *statementhndle;
oratext    *selcid = (oratext *)"SELECT SYS_CONTEXT('CLIENTCONTEXT',
            attribute) FROM  DUAL"; 
 
OCIStmtPrepare(statementhndle, errhp, selcid, (ub4) strlen((char *) selcid),
  (ub4) OCI_NTV_SYNTAX, (ub4) OCI_DEFAULT); 
 
OCIDefineByPos(statementhndle, &amp;defnp1, errhp, 1, (dvoid *)clientid, 31,
  SQLT_STR, (dvoid *) 0, (ub2 *) 0, (ub2 *) 0, OCI_DEFAULT);
 
OCIStmtExecute(servhndle, statementhndle, errhp, (ub4) 1, (ub4) 0,
  (CONST OCISnapshot *) NULL, (OCISnapshot *) NULL, OCI_DEFAULT);
 
printf("CLIENT_IDENTIFIER = %s \n", clientid);
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblsimple" --></div>
<!-- class="example" -->
<p>In this example:</p>
<ul>
<li>
<p><span class="bold">Lines 1&ndash;5:</span> Create variables to store the client session ID, reference call for <code>OCIDefine</code>, the statement handle, and the <code>SELECT</code> statement to use.</p>
</li>
<li>
<p><span class="bold">Lines 7&ndash;8:</span> Prepare the statement <code>selcid</code> for execution.</p>
</li>
<li>
<p><span class="bold">Lines 10&ndash;11:</span> Define the output variable <code>clientid</code> for client session ID.</p>
</li>
<li>
<p><span class="bold">Lines 13&ndash;14:</span> Execute the statement in the <code>selcid</code> variable.</p>
</li>
<li>
<p><span class="bold">Line 16:</span> Prints the formatted output for the retrieved client session ID.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDBGGCH"></a>
<div id="DBSEG98211" class="sect2">
<h3 class="sect2">Clearing a Setting in the CLIENTCONTEXT Namespace</h3>
<p><a id="sthref1275"></a>For Oracle Call Interface, to clear a setting in <code>CLIENTCONTEXT</code>, set the value to <code>NULL</code> or to an empty string by using one of the following commands:</p>
<pre>
(void) OCIAppCtxSet((void *) <span class="italic">session_handle</span>, (dvoid *)"CLIENTCONTEXT", 13,
                   (dvoid *)<span class="italic">attribute_name</span>, <span class="italic">length_of_attribute_name</span>, 
                   (dvoid *)0, 0,errhp
                   OCI_DEFAULT);
</pre>
<p>or</p>
<pre>
(void) OCIAppCtxSet((void *) <span class="italic">session_handle</span>, (dvoid *)"CLIENTCONTEXT", 13
                   (dvoid *)<span class="italic">attribute_name</span>, <span class="italic">length_of_attribute_name</span>, 
                   (dvoid *)"", 0,errhp,
                   OCI_DEFAULT);
</pre>
<p>For JDBC, use the following command:</p>
<pre>
public void setApplicationContext(String CLIENTCONTEXT, 
                   string <span class="italic">attribute</span>, 
                   string <span class="italic">value</span>) 
                   throws SQLException; 
</pre>
<p>In this specification:</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">attribute</span></code>: Represents the attribute whose value must be cleared.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">value</span></code>: Either <code>0</code> or the null string <code>("")</code>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDEDEFH"></a>
<div id="DBSEG98212" class="sect2">
<h3 class="sect2">Clearing All Settings in the CLIENTCONTEXT Namespace</h3>
<p>For Oracle Call Interface (OCI), use a command of the following form:</p>
<pre>
err = OCIAppCtxClearAll((void *) <span class="italic">session_handle</span>, 
                       (dvoid *)"CLIENTCONTEXT", 13,
                        errhp,                        OCI_DEFAULT);
</pre>
<p>For JDBC, use a command of the following form:</p>
<pre>
public void clearAllApplicationContext(
                        String CLIENTCONTEXT) 
                        throws SQLException;<a id="sthref1276"></a>
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHHGDIF"></a>
<div id="DBSEG98213" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Finding Information About Application Contexts</h2>
<p><a id="sthref1277"></a><a href="#CIHEEEHH">Table 6-3</a> <a id="sthref1278"></a>lists data dictionary views that you can query to find information about application contexts. For detailed information about these views, see <a class="olink REFRN" href="../../server.111/b28320/toc.htm"><span class="italic">Oracle Database Reference.</span></a></p>
<div id="DBSEG98214" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref1279"></a><a id="CIHEEEHH"></a>Table 6-3 Data Dictionary Views That Display Information about Application Contexts</p>
<table class="cellalignment1576" title="Data Dictionary Views That Display Information about Application Contexts" summary="Application Context Views" dir="ltr">
<thead>
<tr class="cellalignment1570">
<th class="cellalignment1577" id="r1c1-t30">View</th>
<th class="cellalignment1577" id="r1c2-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1570">
<td class="cellalignment1578" id="r2c1-t30" headers="r1c1-t30">
<p><code>ALL_CONTEXT</code></p>
</td>
<td class="cellalignment1578" headers="r2c1-t30 r1c2-t30">
<p>Describes all context namespaces in the current session for which attributes and values were specified using the <code>DBMS_SESSION.SET_CONTEXT</code> procedure. It lists the namespace and its associated schema and PL/SQL package.</p>
</td>
</tr>
<tr class="cellalignment1570">
<td class="cellalignment1578" id="r3c1-t30" headers="r1c1-t30">
<p><code>ALL_POLICY_CONTEXTS</code></p>
</td>
<td class="cellalignment1578" headers="r3c1-t30 r1c2-t30">
<p>Describes the driving contexts defined for the synonyms, tables, and views accessible to the current user. (A <a id="sthref1280"></a><a id="sthref1281"></a>driving context is a context used in a Virtual Private Database policy.)</p>
</td>
</tr>
<tr class="cellalignment1570">
<td class="cellalignment1578" id="r4c1-t30" headers="r1c1-t30">
<p><code>DBA_CONTEXT</code></p>
</td>
<td class="cellalignment1578" headers="r4c1-t30 r1c2-t30">
<p>Provides all context namespace information in the database. Its columns are the same as those in the <code>ALL_CONTEXT</code> view, except that it includes the <code>TYPE</code> column. The <code>TYPE</code> column describes how the application context is accessed or initialized.</p>
</td>
</tr>
<tr class="cellalignment1570">
<td class="cellalignment1578" id="r5c1-t30" headers="r1c1-t30">
<p><code>DBA_POLICY_CONTEXTS</code></p>
</td>
<td class="cellalignment1578" headers="r5c1-t30 r1c2-t30">
<p>Describes all driving contexts in the database that were added by the <code>DBMS_RLS.ADD_POLICY_CONTEXT</code> procedure. Its columns are the same as those in <code>ALL_POLICY_CONTEXTS</code>.</p>
</td>
</tr>
<tr class="cellalignment1570">
<td class="cellalignment1578" id="r6c1-t30" headers="r1c1-t30">
<p><code>SESSION_CONTEXT</code></p>
</td>
<td class="cellalignment1578" headers="r6c1-t30 r1c2-t30">
<p>Describes the context attributes and their values set for the current session.</p>
</td>
</tr>
<tr class="cellalignment1570">
<td class="cellalignment1578" id="r7c1-t30" headers="r1c1-t30">
<p><code>USER_POLICY_CONTEXTS</code></p>
</td>
<td class="cellalignment1578" headers="r7c1-t30 r1c2-t30">
<p>Describes the driving contexts defined for the synonyms, tables, and views owned by the current user. Its columns (except for <code>OBJECT_OWNER</code>) are the same as those in <code>ALL_POLICY_CONTEXTS</code>.</p>
</td>
</tr>
<tr class="cellalignment1570">
<td class="cellalignment1578" id="r8c1-t30" headers="r1c1-t30">
<p><code>V$CONTEXT</code></p>
</td>
<td class="cellalignment1578" headers="r8c1-t30 r1c2-t30">
<p>Lists set attributes in the current session. Users do not have access to this view unless you grant the user the <code>SELECT</code> privilege on it.</p>
</td>
</tr>
<tr class="cellalignment1570">
<td class="cellalignment1578" id="r9c1-t30" headers="r1c1-t30">
<p><code>V$SESSION</code></p>
</td>
<td class="cellalignment1578" headers="r9c1-t30 r1c2-t30">
<p>Lists detailed information about each current session. Users do not have access to this view unless you grant the user the <code>SELECT</code> privilege on it.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
In addition to these views, check the database trace file if you find errors when running applications that use application contexts. See <a class="olink PFGRF010" href="../../server.111/b28274/sqltrace.htm#PFGRF010"><span class="italic">Oracle Database Performance Tuning Guide</span></a> for more information about trace files. The <code>USER_DUMP_DEST</code> initialization parameter specifies the <a id="sthref1282"></a>current location of the trace files. You can find the value of this parameter by issuing <code>SHOW PARAMETER USER_DUMP_DEST</code> in SQL*Plus.</div>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1569">
<tr>
<td class="cellalignment1578">
<table class="cellalignment1574">
<tr>
<td class="cellalignment1573"><a href="app_devs.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1573"><a href="vpd.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2006, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1581">
<table class="cellalignment1572">
<tr>
<td class="cellalignment1573"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1573"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1573"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1573"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1573"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1573"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
