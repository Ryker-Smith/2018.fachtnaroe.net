#!/usr/bin/perl

# Add in necessary modules, define constants
$error = undef;
$pop3server = 'linux2';
use Net::POP3;
@duedates = ("EMPTY", "20001030", "20001222", "20010401", "20010501");
$destination = 'fachtna@cti-clonmel.ie';

# Specify libraries required
require "subparseform.lib";
require "htmlutilities.lib";
require "commonsubmit.lib";

&Parse_Form;
&ContentType;
&nicefont;

print "&#60;P&#62;";

# This program compares dates of form YYYYMMDD
($sec,$min,$hour,$mday,$mon,$year) = gmtime;
$mon = $mon + 1;
$year = $year + 1900;
if ($sec  &#60; 10) { $sec  = '0'.$sec;  }
if ($min  &#60; 10) { $min  = '0'.$min;  }
if ($hour &#60; 10) { $hour = '0'.$hour; }
if ($mon  &#60; 10) { $mon  = '0'.$mon;  }
if ($mday &#60; 10) { $mday = '0'.$mday  }

$fancydate = $year.$mon.$mday;
$fancytime = $hour.':'.$min.':'.$sec;

# Check validity of userid submitted
$userid = $formdata{'userid'};
if ($userid eq "nouseridgiven")
{
 &MissingDataErrorMessage ("No student name was given!");
 exit;
}
else
{
 &Bold;
 print "UserID is:";
 &NoBold;
 print " $userid.";
}

# Check validity of assignnum submitted
$assignnum = $formdata{'assignnum'};
print "&#60;P&#62;";
if (  ($assignnum ne "1") 
   && ($assignnum ne "2")
   && ($assignnum ne "3")
   && ($assignnum ne "4") )
{
 &MissingDataErrorMessage ("No assignment # was chosen!");
 exit;
}
else
{
 &Bold;
 print "Assignment # is:";
 &NoBold;
 print "  $assignnum.";
}
&Bold;
print "&#60;P&#62;Assignment Due Date: ";
&NoBold;
print "$duedates[$assignnum]&#60;P&#62;";

if ( $fancydate &#62; $duedates[$assignnum] )
{
 &MissingDataErrorMessage ("The submission date for that assignment has passed.", 1);
 &MissingDataErrorMessage ("Your submission cannot be accepted.", 1);
 exit;
}

# Identify the connected host
$remote_IP = $ENV{'REMOTE_ADDR'};
$remote_HOST= $ENV{'REMOTE_HOST'};
&Bold;
print "&#60;P&#62;Remote IP Address is: ";
&NoBold;
print "$remote_IP (";
#$remotehostname = gethostbyaddr $remote_IP, pf_inet;
print $remote_HOST;
print ') &#60;P&#62;';

#$sourcecode = $formdata{'sourcecode'};

&Bold;
print "&#60;P&#62;Authenticating user: ";
&NoBold;

# Use the POP3 server as a login authenticator
$pop = Net::POP3-&#62;new ($pop3server);
$pass = $formdata{'password'};
$res = $pop-&#62;login ($userid,$pass);
if ( $res eq $error)
{
 &MissingDataErrorMessage ("Failed to authenticate.", 1);
 print '(&#60;I&#62;Check your password!!!&#60;/I&#62;)';
 exit;
}
else
{
 print ("Authentication granted. User is cleared for submission.");
}
# Terminate connection to login server
$pop-&#62;quit();

print "&#60;P&#62;";

# Add username, assignment number, and .c extension to form the filename. Separate with dots.
$filename = $userid.'.'.$assignnum.'.c';
&Bold;
print 'File identifier is: ';
&NoBold;
print $filename;
&Bold;
print '&#60;P&#62;Progress:&#60;P&#62;';
&NoBold;

($dev, $ino, $mode, $nlink, $uid, $gid, $rdev, $size )= stat "$submitfilepath$filename";

if ($ino != 0) 
{
 print 'File already exists, overwriting.';
 chmod 777, "$submitfilepath$filename";
 system ("rm -f $submitfilepath$filename");
}
else
{
 print 'Creating new submission file.';
}

@sourcecode = $formdata{'sourcecode'};
# Print a small header into the submission
unshift (@sourcecode,
"/*\n",
"========================================================\n",
"Submitted on: $fancydate at: $fancytime from: $remote_IP\n",
"========================================================\n",
"*/\n");
# Open submission file
open (SFILE,"&#62;$submitfilepath$filename");
flock (SFILE, 2);
print SFILE @sourcecode;
flock (SFILE, 8);
close (SFILE);
print '&#60;P&#62;File creation completed.';
&postit;
&BigText;&Bold;
print '&#60;P&#62;Program Submission Completed.';
&NoBigText;&NoBold;
exit;

###### SubRoutine Section ##############

sub postit {
$destination = "fachtna\@cti-clonmel.ie";
open (MAIL, "| /usr/sbin/sendmail -t");
print MAIL "To: $destination\n";
print MAIL "From: $userid\n";
print MAIL "Subject:Programming Assignment $assignnum\n";
print MAIL @sourcecode;
close (MAIL);

$destination = "$userid\@cti-clonmel.ie";
open (MAIL, "| /usr/sbin/sendmail -t");
print MAIL "To: $destination\n";
print MAIL "From: fachtna\@cti-clonmel.ie\n";
print MAIL "Subject:Programming Assignment $assignnum\n";
print MAIL @sourcecode;
close (MAIL);

print ("&#60;P&#62;MAIL routine completed.");
}

sub MissingDataErrorMessage {
 &RedColor;
 &BigText; &BigText;
 print "$_[0]&#60;P&#62;";
 &NoBigText; &NoBigText;
 &BlackColor;
 if ("$_[1]" != 1)
  { &BackButton; };
}

