<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
 <title>Central Technical Institute Intranet</title>
	<link rel="stylesheet" type="text/css" media="screen" href="/style.css" />
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
<body>
<a name="top"></a>
<div class="hide">Skip to:<a href="#info">content</a>, <a href="#navigation">navigation</a></div>
<div id="logo"><h1>CTI-Clonmel Intranet</h1></div><br clear="all" />
<div id="nav">
<ul>
	<li>Tools</li>
	<li class="mail"><a href="https://mail.cti-clonmel.ie/cgi-bin/openwebmail/openwebmail.pl">Web Mail</a></li>
	<li class="cal"><a href="http://webmail.cti-clonmel.ie/cgi-bin/events/event-list.pl#today">Calendar</a></li>
	<li class="search"><a href="http://www.google.ie">Internet Search</a></li>
	<li class="password"><a href="http://193.120.102.192:81/cgi-bin/changepassword.cgi">Password Change</a></li>
	<li class="help"><a href="/help">Help</a></li>
</ul>
<ul>
	<li class="material"><a href="/subjects/subjectsmain.html">Course Material</a></li>
</ul>
</div>
<div id="content">
<h1>Perl - Part 4</h1>
<!--#exec cgi="/cgi-bin/shtml/navigate.shtml" -->
<h2>Programming Component Continued<h2>
<h3> You will find it useful to be able to accept <b>input</b> into as well as generate <b>output</b> from your programs. Presently you are using the <b>print</b> command for output. We shall now create a program that uses just one of the many possible methods to accept input into your program.</h3>
<h3>Create a file called <b>greetme.pl</b> with this code in it:</h3>
<font face="Courier" >
<p>#!/usr/bin/perl
<br>&nbsp;&nbsp;use Term::ReadKey;
<br>
<br>&nbsp;&nbsp;print "Hello. Who are you?\n";
<br>&nbsp;&nbsp;$name = ReadLine;
<br>&nbsp;&nbsp;print "Hello, $name.\n";
</font>
<h3>Note that we wish to use the <b>ReadLine</b> function for input. This is not part of the Perl language so we have to include the module that contains that function. This is the module called <b>Term::ReadKey</b> (note that the language is case-sensitive!) and explains why the second line in this program contains an instruction to <b>use</b> that module, thereby making it's functions available to us for use.</h3>
<h3>Run the program and see what happens. You should notice a minor flaw in the output as shown below:</h3>
<center><img width="90%"  src="/images/greetme01-pl.png" /></center>
<h3>As before, the issue of line breaks raises it's head, but not as expected. When we used the ReadLine function the program read in the whole line that we typed - including the carriage return after our name. So when the line is printed back out, the line break is printed too; hence the full stop on the next line. So we need to extract the newline character from the input, before generating our output.</h3>
<h3>Fortunately Perl is great at this type of manipulation. Sadly, it doesn't look pretty and causes unpleasantness in the life of 13 out of 10 cats whose owners are learning this method of manipulation. It's hugely powerful as a feature; which is pretty much the same opinion that a Great White Shark has about it's mouth.<h3>
<h3>Don't ask questions yet, just put in this line...</h3>
<font face="Courier" >
<br>&nbsp;&nbsp;$name =~ s/\n//;
<p>
</font>
<h3>...so that your program looks like this:</h3>
<font face="Courier" >
<p>#!/usr/bin/perl
<br>&nbsp;&nbsp;use Term::ReadKey;
<br>&nbsp;&nbsp;
<br>&nbsp;&nbsp;print "Hello. Who are you?\n";
<br>&nbsp;&nbsp;$name = ReadLine;
<br>&nbsp;&nbsp;<b>$name =~ s/\n//;</b>
<br>&nbsp;&nbsp;print "Hello, $name.\n";
<p>
</font>
<h3>You should now have a program that says 'Hello' back to you with your name and all output properly positioned.</h3>
<h2>What was that all about?</h2>
<h3>Well, two things really:</h3>
<ol>
<li>Text manipulation:</li>
	<ul>
	<li>Perl is superior when it comes to text manipulation. Put simply, the line <b>$name =~ s/\n//;</b> substituted (because of the letter <b>s</b>) all occurences of <b>\n</b> with a nothing (the contents of the second <b>//</b>).</li>
	<li>The general structure of the substitution is <b>s/</b><i>what to replace</i><b>/</b><i>what to replace it with</i><b>/</b></li>
	<li>No. You're not alone. It does look messy and require concentration to get right. But you'll see the logic of the mechanism with practise.</li>
	</ul>
<li>Language Extensibility:</li>
	<ul>
	<li>The use of the Term::ReadKey module shows we can add aspects and functions to the language. Many languages are created this way. If you buy a book on Perl, make sure as many modules as possible are documented. In any case, documentation and software are freely available from <a href="http://www.cpan.org">CPAN</a>.</li>
	</ul>
</ol>
<h3>This completes the creation of a Perl program that requests and accepts input, and then generates output, confirming that we can create more interactive programs. It goes without saying that there was an easier way to do this but for now you've been introduced to some features of Perl. Read on for a program that manipulates input further......</h3>
<!--#exec cgi="/cgi-bin/shtml/navigate.shtml" -->
</div>
</body>
</html>